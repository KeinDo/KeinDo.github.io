[
  {
    "objectID": "QMD/weekly_new_entrances.html",
    "href": "QMD/weekly_new_entrances.html",
    "title": "weekly new entrances",
    "section": "",
    "text": "get_last_zip = function(){\n  path = \"data/source/weekly_entrances/zip_files_entrances/\"\n  zip_file &lt;- list.files(path = path, pattern = \"\\\\.zip$\", full.names = TRUE)\n  return(max(zip_file))\n}\n\n\n\n\n\nget_last_entrance_full_list = function(){\n  path = \"data/source/weekly_entrances/process_results/already_processed/\"\n  temp &lt;- list.files(path = path, pattern = \"\\\\processed_entrance.csv$\", full.names = TRUE)\n  return(max(temp))\n}\n\n==&gt; Etapes gérées au niveau du fichier _targets.R en amont de la list de nodes pour faciliter le tracking nouveau fichier",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "weekly new entrances"
    ]
  },
  {
    "objectID": "QMD/weekly_new_entrances.html#fichiers-sources",
    "href": "QMD/weekly_new_entrances.html#fichiers-sources",
    "title": "weekly new entrances",
    "section": "",
    "text": "get_last_zip = function(){\n  path = \"data/source/weekly_entrances/zip_files_entrances/\"\n  zip_file &lt;- list.files(path = path, pattern = \"\\\\.zip$\", full.names = TRUE)\n  return(max(zip_file))\n}\n\n\n\n\n\nget_last_entrance_full_list = function(){\n  path = \"data/source/weekly_entrances/process_results/already_processed/\"\n  temp &lt;- list.files(path = path, pattern = \"\\\\processed_entrance.csv$\", full.names = TRUE)\n  return(max(temp))\n}\n\n==&gt; Etapes gérées au niveau du fichier _targets.R en amont de la list de nodes pour faciliter le tracking nouveau fichier",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "weekly new entrances"
    ]
  },
  {
    "objectID": "QMD/weekly_new_entrances.html#traitement-des-sorties",
    "href": "QMD/weekly_new_entrances.html#traitement-des-sorties",
    "title": "weekly new entrances",
    "section": "2 Traitement des sorties",
    "text": "2 Traitement des sorties\nDans le cadre du traitement des listes d’entrants et des personnes toujours en attente d’être rencontrées des semaines précédentes, on importe les données de l’ensemble des sorties (libération, transferts, etc) repérées depuis le début de l’étude. Ces données sont retraitées pour matcher plus directement avec les autres traitements liés (voir le tar_visnetwork() )\n\n# Fonction de traitement du fichier des sorties depuis le début de l'étude\n# Le fichier zip contient plusieurs fichier distincts a bien repérer\n\nliberation_histo = function(zip_path){\n  file_list &lt;- unzip(zip_path, list = TRUE)\n  file_sortie &lt;- file_list$Name[grep(\"^EPSYLON_V1\", file_list$Name)]\n  sorties = read_excel(unzip(zip_path, file_sortie), sheet = \"Rapport 1\") %&gt;%\n    clean_names() %&gt;%\n    mutate(libelle_court_etablissement_mouvement = ifelse(libelle_court_etablissement_mouvement == \"CP FLEURY MEROGIS\",\"MA FLEURY MEROGIS\",libelle_court_etablissement_mouvement)) %&gt;% \n    mutate(ecrou_init = \n             case_when(\n               libelle_court_etablissement_mouvement == \"MA FLEURY MEROGIS\" ~ substr(n_ecrou_initial, nchar(n_ecrou_initial)-5, nchar(n_ecrou_initial))\n               ,TRUE ~ substr(n_ecrou_initial, nchar(n_ecrou_initial)-4, nchar(n_ecrou_initial)))\n    )\n  write.csv2(sorties,\"data/source/weekly_entrances/process_results/ensemble_sorties.csv\") #Export pour trace\n  if (file.exists(file_sortie)) {file.remove(file_sortie)}\n  return(sorties)\n}",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "weekly new entrances"
    ]
  },
  {
    "objectID": "QMD/weekly_new_entrances.html#traitement-des-entrées",
    "href": "QMD/weekly_new_entrances.html#traitement-des-entrées",
    "title": "weekly new entrances",
    "section": "3 Traitement des entrées",
    "text": "3 Traitement des entrées\nLe fichier des entrées se compose de 3 onglets distincts :\n\nLa liste des personnes arrivées sur les 8 derniers jours glissants\nLa liste des personnes du 1 déjà sorties de l’établissement\nLa localisation connue au moment de l’extraction de chaque personne de 1\n\nLe second onglet a été rendu inutile par l’ajout de l’ensemble des sorties depuis le début du projet, on peut donc directement travailler à partir de la liste des sorties, et des onglets 1 et 3 du fichier d’entrée.\n\n3.1 Fonction d’import des rapports 1-3\n\nrapp_import = function(zip_path, rapp_name){\n  file_list &lt;- unzip(zip_path, list = TRUE)\n  filename &lt;- file_list$Name[grep(\"^EPSYLON_V0_\", file_list$Name)]\n  rapp = read_excel(unzip(zip_path, filename), sheet = rapp_name)\n  if (file.exists(filename)) {file.remove(filename)}\n  return(rapp)\n}\n\n\n\n3.2 Nettoyage des rapport 1 et 3\nPour le rapport 1 on reformate les noms et la colonne des dates d’arrivée\n\nrapp1_clean = function(rapp1){\n  temp = rapp1 %&gt;% clean_names() %&gt;% \n    mutate(libelle_court_etablissement_mouvement = ifelse(libelle_court_etablissement_mouvement == \"CP FLEURY MEROGIS\",\"MA FLEURY MEROGIS\",libelle_court_etablissement_mouvement)) %&gt;% \n    mutate(date_mouvement = as.Date(substr(date_et_heure_du_mouvement, 1, 10))) %&gt;%\n    select(-date_et_heure_du_mouvement)\n  \n  return(temp)\n}\n\nLe rapport 3 est délivré dans un format csv US au sein d’un fichier excel, qui necessite plus d’ajustement pour reconstruire la table proprement\n\nrapp3_clean = function(rapp3){\n  number_of_col = 7 # Nombre de colonnes de la table\n  new_column_names = paste(\"Part\", 1:number_of_col, sep = \"\") # creates new col names (going to be deleted anyway)\n  \n  # Spliting col adn removing starting col\n  temp = separate(rapp3, names(rapp3)[1], into = new_column_names, sep = \";\", remove = TRUE)\n  \n  colnames(temp) &lt;- as.character(unlist(temp[1, ])) # Rename columns with 1st row\n  temp &lt;- temp[-1, ]  # Remove 1st row\n  \n  temp = temp %&gt;% clean_names() %&gt;% select(nm_ecrou_init, id_ugc, libelle, ugcmere_fk)\n  \n  return(temp)\n}\n\n\n\n3.3 Production liste nettoyée des entrées de la semaine à rencontrer\nPour rappel dans le cadre du protocole plusieurs restrictions s’appliquent sur les entrées qui nous interesse d’enquêter. On supprime :\n\nles doublons de ligne du rapp1 socle en conservant derniere date de lib previsionnelle\nles personnes ayant déjà au moins 1 mouvement de sortie\nles personnes avec un statut non hebergé\nles personnes sortant du périmetre d’enquête selon leur sexe (H/F selon l’étab)\nLes personne entrant sur une semaine où les inclusions n’ont pas lieu pour Seysses, et Fleury\n\n\n3.3.1 Liste socle\nCette liste socle est transformée à partir des différentes sources de données disponible, et ira alimenter la liste des personnes deja extraites depuis le début de l’étude, ainsi que la fonction de mise en forme destinées à préparer les listes hebdomadaire par établissement à destination des enquêteurs\n\nweekEntrances = function(entree_clean,sorties,cell_loca_clean,cell_nomenc,calend,past_entrances){\n  # Suppression des doublons en ne gardant que la dernière date de sortie prev\n  weekEntrances &lt;- entree_clean %&gt;%\n    group_by(n_ecrou_initial) %&gt;%\n    arrange(desc(date_liberation_previsionnelle)) %&gt;%  # Triez les dates de fin par ordre décroissant\n    slice(1) %&gt;% \n  # Suppression des personnes avec un mouvement de sortie dans les jours entre leur entrées et l'extraction, avec statut d'hebergement, et déjà non considéré dans une extraction antérieure\n    filter(!n_ecrou_initial %in% sorties$n_ecrou_initial &statut_hebergement == \"Hébergé\" & age &gt;= 18) %&gt;% select(-age) %&gt;%\n  \n  # Nettoyage sur condition sexe selon les etab (on explicite tout pour contourner les potentielles erreur sur certains etab)\n    filter(\n      !(libelle_court_etablissement_mouvement == \"MA STRASBOURG\" & sexe == \"M\") &\n      !(libelle_court_etablissement_mouvement == \"CP LILLE LOOS SEQUEDIN\" & sexe == \"M\") &\n      !(libelle_court_etablissement_mouvement == \"MA VERSAILLES\" & sexe == \"M\") &\n      !(libelle_court_etablissement_mouvement == \"MA MONTAUBAN\" & sexe == \"F\") &\n      !(libelle_court_etablissement_mouvement == \"CP LILLE ANNOEULLIN\" & sexe == \"F\")\n    )  %&gt;% \n    filter(!(libelle_court_etablissement_mouvement %in% c(\"CP TOULOUSE SEYSSES\",\"MA FLEURY MEROGIS\") & sexe == \"M\" & as.Date(date_mouvement) %in% as.Date(calend$date))) %&gt;% \n    left_join(cell_loca_clean, by = c(\"n_ecrou_initial\" = \"nm_ecrou_init\")) %&gt;% rename(ugc_cellule = id_ugc, id_ugc = ugcmere_fk) %&gt;% \n    left_join(cell_nomenc, by = c(\"id_ugc\" = \"id_ugc_cell\"))  \n  weekEntrances = weekEntrances %&gt;% filter(!n_ecrou_initial %in% past_entrances$n_ecrou_initial)\n  \n  return(weekEntrances)\n}\n\n\n\n\n3.4 Update de la liste totale des entrées depuis le début de l’étude\n\n# Sauvegarde de la liste précédente dans un sous rep\nfull_to_meet_list_update = function(past_entrances,weekEntrances_list,entrance_zip){\n  if(nrow(weekEntrances_list) &gt; 0){\n    temp = weekEntrances_list %&gt;% mutate(src_data = basename(entrance_zip)) %&gt;% mutate(across(everything(), as.character))\n    temp = temp %&gt;% mutate(across(where(~ !inherits(.x, \"Date\")), ~na_if(.x, \"\")))\n    temp = rbind(past_entrances,temp) %&gt;% unique()\n    length(unique(temp$n_ecrou_initial))\n    write.csv2(temp,paste0(\"data/source/weekly_entrances/process_results/already_processed/\",as.Date(Sys.time()),\"_save_already_processed_entrance.csv\"),row.names = FALSE,)\n  return(temp)\n  } else(return(data.frame()))\n}",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "weekly new entrances"
    ]
  },
  {
    "objectID": "QMD/weekly_new_entrances.html#listes-entrées-hebdo-finalisées",
    "href": "QMD/weekly_new_entrances.html#listes-entrées-hebdo-finalisées",
    "title": "weekly new entrances",
    "section": "4 Listes entrées hebdo finalisées",
    "text": "4 Listes entrées hebdo finalisées\n\n4.1 Pré-traitement\n\ninvestigator_week_list_prep = function(weekEntrances_list){\n  temp &lt;- weekEntrances_list %&gt;%\n    rename(cellule = libelle, \n           date_entree = date_mouvement,\n           etablissement =libelle_court_etablissement_mouvement) %&gt;% \n    arrange(etablissement, sexe,date_entree, date_liberation_previsionnelle) %&gt;%\n    mutate(n_ecrou_initial = case_when(\n      etablissement == \"MA FLEURY MEROGIS\" ~ substr(n_ecrou_initial, nchar(n_ecrou_initial)-5, nchar(n_ecrou_initial))\n        ,TRUE ~ substr(n_ecrou_initial, nchar(n_ecrou_initial)-4, nchar(n_ecrou_initial))),\n           planifier_a_partir_du = format(date_entree + 7, format = \"%d/%m/%Y\"),\n           planifier_avant_le = format(date_entree + 21, format = \"%d/%m/%Y\"),\n           date_entree = format(date_entree, format = \"%d/%m/%Y\"),\n           date_liberation_previsionnelle = format(date_liberation_previsionnelle, format = \"%d/%m/%Y\")\n           ) %&gt;% \n    select(-cp_a_lecrou, -type_mouvement, -ugc_cellule, -id_ugc, -statut_hebergement) %&gt;%\n    select(etablissement, n_ecrou_initial, sexe, date_entree, planifier_a_partir_du,  planifier_avant_le, everything())\n  return(temp)\n}\n\n\n\n4.2 Export par établissement\n\nweek_list_export = function(meet_list_prep){\n  bu_folder = \"data/source/weekly_entrances/process_results/listes_hebdomadaires_backup/\"\n  if(nrow(meet_list_prep)&gt;0){\n    etab_list = unique(meet_list_prep$etablissement)\n    date_extraction = as.Date(Sys.time())\n    \n    week_folder = paste0(\"Ressources enquête/Listes hebdomadaires entretiens/\",date_extraction,\"_liste_etab/\")\n  \n    if (!dir.exists(week_folder)) {\n      dir.create(week_folder)\n    }\n    for (etab in etab_list){\n      to_meet_detai = meet_list_prep %&gt;% filter(etablissement == etab)\n      write.xlsx(to_meet_detai,paste0(week_folder,as.Date(Sys.time()),\"_\",etab,\"_liste_planification.xlsx\"))\n    }\n    file.copy(from = week_folder, to = bu_folder, recursive = TRUE)\n  }\n  return(bu_folder)\n}\n\nCreation d’une liste unique de toutes les personnes intégrée à une liste hebdomadaire\n\nall_to_meet_list_func = function(bu_folder){\n  to_merge = list.files(path = bu_folder, pattern = \"\\\\planification.xlsx$\", full.names = TRUE, recursive = TRUE)\n  \n  data_frames &lt;- lapply(to_merge, read_excel)\n  \n  data_frames = lapply(data_frames, function(df) {\n    if(\"date_entree\" %in% names(df)) {\n      df$date_entree &lt;- as.Date(df$date_entree, format = \"%d/%m/%Y\")\n    }\n    if(\"date_liberation_previsionelle\" %in% names(df)) {\n      df$date_liberation_previsionelle &lt;- as.Date(df$date_liberation_previsionelle, format = \"%d/%m/%Y\")\n    }\n    # Return the modified data frame\n    return(df)\n  })\n  \n  merged_data &lt;- do.call(rbind, data_frames) %&gt;% arrange(etablissement,sexe,date_entree) %&gt;% unique() %&gt;% \n    mutate(\n    planifier_a_partir_du = as.Date(date_entree) + 7    \n    ,planifier_avant_le = as.Date(date_entree) + 21\n  )\n  \n  write.csv2(merged_data,paste0(bu_folder,\"../ensemble_inclusions.csv\"))\n  return(merged_data)\n}",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "weekly new entrances"
    ]
  },
  {
    "objectID": "QMD/intro.html",
    "href": "QMD/intro.html",
    "title": "Intro",
    "section": "",
    "text": "Ce wiki repertorie l’ensemble des scripts dédiés au traitement des données d’entrants/sortants sur les établissements enquêtés.\nVous trouverez les scripts permettant :\n\nLe traitement des entrants des 8 jours précédents. Incluant :\n\nL’identification des doublons du à la superposition de certaines dates\nLa vérification des sorties précoces\nLe repérage de la localisation a partir de l’extrait de nomenclature UGC\nLa génération des fichiers individuels pour transmission à chauqe établissement\n\n\nLes données importées et exportées n’apparaissent pas dans les résultats pour des questions de confidentialité.",
    "crumbs": [
      "Intro"
    ]
  },
  {
    "objectID": "QMD/Import M0.html",
    "href": "QMD/Import M0.html",
    "title": "EPSYLON study results DL and processing",
    "section": "",
    "text": "from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.by import By\nimport time\nimport os\nfrom datetime import datetime\nimport sqlite3\nimport glob",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "EPSYLON study results DL and processing"
    ]
  },
  {
    "objectID": "QMD/Import M0.html#libraries",
    "href": "QMD/Import M0.html#libraries",
    "title": "EPSYLON study results DL and processing",
    "section": "",
    "text": "from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.by import By\nimport time\nimport os\nfrom datetime import datetime\nimport sqlite3\nimport glob",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "EPSYLON study results DL and processing"
    ]
  },
  {
    "objectID": "QMD/Import M0.html#settings",
    "href": "QMD/Import M0.html#settings",
    "title": "EPSYLON study results DL and processing",
    "section": "1.1 Settings",
    "text": "1.1 Settings\n\n1.1.1 Manual parameters\n\n\n1.1.2 Autocalc param\n\nnow = datetime.now()\ndirectory = now.strftime(\"%Y-%m-%d_%Hh%Mm%Ss\")+'_epsylon_save'\npath = os.path.join(dl_folder, directory)\nos.mkdir(path)",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "EPSYLON study results DL and processing"
    ]
  },
  {
    "objectID": "QMD/Import M0.html#download-execution-m0-m3-m9",
    "href": "QMD/Import M0.html#download-execution-m0-m3-m9",
    "title": "EPSYLON study results DL and processing",
    "section": "1.2 Download execution (M0-M3-M9)",
    "text": "1.2 Download execution (M0-M3-M9)\n\n# Login/out session for each loop occurence isn't the most efficient, but no other choice to change download directory without going on non supported experimental options.\n\n# The scrapping has to be replaced when goupile will include an API\n\nfor site in site_list:\n  path_temp = os.path.join(path, site)\n  os.mkdir(path_temp)\n  path_temp = os.path.join(path_temp, \"DB\")\n  os.mkdir(path_temp)\n  print(\"\\nDownload \" + site +\" : \")\n  \n  # Launch chrome + options\n  options = webdriver.ChromeOptions()\n  # options.add_argument(\"--headless=new\") # Trigger/disable visual navigator\n  prefs = {\"download.default_directory\": os.path.abspath(path_temp), \"download.directory_upgrade\": True}\n  print(os.path.abspath(path_temp))\n  options.add_experimental_option(\"prefs\", prefs)\n  driver = webdriver.Chrome(options=options)\n  driver.implicitly_wait(3) # seconds - absolutly needed for login and DL\n\n  # Go to goupile login page\n  driver.get(login_url+'epsylon')\n\n  # Username and password clean then fill\n  username_field = driver.find_element(By.ID, 'fm_var_0')\n  username_field.clear()\n  username_field.send_keys(username)\n\n  password_field = driver.find_element(By.ID, 'fm_var_1')\n  password_field.clear()\n  password_field.send_keys(password)\n\n  password_field.send_keys(Keys.RETURN) # Cred. submission\n\n  # DL all listed study centers\n  for center in center_list:\n    time.sleep(dl_time) # Timer to let download time\n    center_url = login_url+site+'/'+center+'/main/consent'\n    dl_url = login_url+site+'/'+center+'/api/records/export'\n    print(\"Loading || \"+center+\" : \"+dl_url)\n    driver.get(dl_url)\n    print(\"Done || \"+center+\" : \"+dl_url)\n\n  time.sleep(dl_time) # DL time needed for last loop before closing connection\n  driver.quit()\n\n\n1.2.0.1 Final DL folder opening\n\nos.startfile(path)",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "EPSYLON study results DL and processing"
    ]
  },
  {
    "objectID": "QMD/data_consistency.html",
    "href": "QMD/data_consistency.html",
    "title": "Contrôle cohérence",
    "section": "",
    "text": "# Controle doublons et personnes orphelines\n\nctrl_coherence = function(labeled_m, all_to_meet_list,title){ \n  output_path = \"data/output/coordination_tools\"\n  orphelin = labeled_m %&gt;% filter(!(ecrou_init %in% all_to_meet_list$n_ecrou_initial))\nprint(paste0(\"Orphelins : \", nrow(orphelin)))\n \n  doublons = as.data.frame(table(labeled_m$ecrou_init)) %&gt;% filter(Freq &gt; 1)\n  doublons = labeled_m %&gt;% filter(ecrou_init %in% doublons$Var1)\n  print(paste0(\"Doublons : \", nrow(doublons)))\n \n  # Export csv des lignes problématiques\n  write.csv2(doublons, paste0(output_path,\"/doublons_\",title,\".csv\"))\n  write.csv2(orphelin, paste0(output_path,\"/orphelin_\",title,\".csv\"))\n   \n}",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "Contrôle cohérence"
    ]
  },
  {
    "objectID": "data/source/weekly_entrances/nomenc/Import_UGC_nomenc.html",
    "href": "data/source/weekly_entrances/nomenc/Import_UGC_nomenc.html",
    "title": "Import UGC",
    "section": "",
    "text": "Script d’import et de transformation de la table de nomenclature UGC permettant de repérer les localisations des personnes a enquêter au moment de l’extraction.\nLe fichier est en format SAS, il doit être converti, puis transformer pour modifier la structure hierarchique.\nCe programme n’est à executer que lors de la mise à jour de la table de nomenclature UGC par EX3.\nLe résultat de table est exporté pour réutilisation dans le script “code_entree.qmd”"
  },
  {
    "objectID": "data/source/weekly_entrances/nomenc/Import_UGC_nomenc.html#import-fichier-sas",
    "href": "data/source/weekly_entrances/nomenc/Import_UGC_nomenc.html#import-fichier-sas",
    "title": "Import UGC",
    "section": "1 Import fichier sas",
    "text": "1 Import fichier sas\n\n1.1 Libraries\n\n# haven package to deal with sas file\nif (!require(haven, quietly = TRUE)) {\n    install.packages(\"haven\")\n} \n\n\n\n1.2 Parameters\n\n# To fill param\nfile_name = \"p_ugc_epsylon_20240320.xlsx\"\noutput_filename = \"nomenc_ugc_red_v2.csv\"\n\n\n# Auto param\nugcfilepath = \"data/source/weekly_entrances/nomenc/\"\nugc_nomenc = read_excel(paste0(ugcfilepath,file_name))"
  },
  {
    "objectID": "data/source/weekly_entrances/nomenc/Import_UGC_nomenc.html#traitement-donnée",
    "href": "data/source/weekly_entrances/nomenc/Import_UGC_nomenc.html#traitement-donnée",
    "title": "Import UGC",
    "section": "2 Traitement donnée",
    "text": "2 Traitement donnée\n\n\n\n\n\n\nInformation EX3 sur les données\n\n\n\n“Pour récupérer l’information des bâtiments, on se base sur les données des UGC (Unité Géographique Celullaire). Depuis le Requêteur, j’exporte un ID_UGC pour chaque personne dans la semaine en cours. Normalement je fais un tri donc c’est bien le dernier UGC occupé pendant la période choisie.\nLa variable ID_UGC correspond à la cellule de l’individu, soit le plus petit niveau possible. Mais a chaque ID_UGC est associé une variable UGCMERE_FK qui indique le code UGC de l’espace géographique du dessus (le couloir, par exemple). Et pour chaque ligne d’UGC, c’est le même principe, le plus haut niveau d’ID_UGC étant celui correspondant à l’établissement.\nPour savoir dans quel bâtiment se trouve les gens, je dois donc joindre notre exporte avec la table P_UGC, qui contient l’ensemble des UGC, et récupérer les UGCMERE_FK, jusqu’à ce que j’ai le niveau d’information qui me convient.\nPar exemple ici, je l’ai fait 3 fois et j’ai eu l’information du bâtiment pour tout le monde.”\n\n\nOn reconstruit donc la table hierarchique à plat mais en partant sur une fonction pour tenir compte du nombre d’emboitement max\n\n2.0.1 Selection + nettoyage des colonnes et retypage\n\n#Type transformation + var selection\np_ugc_small = ugc_nomenc %&gt;%  select(\"ID_UGC\", \"LIBELLE\", \"UGCMERE_FK\") %&gt;%\n  clean_names() %&gt;% mutate(across(everything(), as.character))\n\n\n\n2.0.2 Fonction d’aggregation des hierarchies\n\nugc_aggre = function(tab){\n  i = 2 #col rename iteration num\n  tab_size = ncol(tab) # funct param for initial tab size variations\n  p_ugc_aggreg =  tab %&gt;% rename(\n    id_ugc_cell = id_ugc,\n     libelle1 = libelle,\n    id_ugc = ugcmere_fk\n  )\n  \n  while (sum(!is.na(p_ugc_aggreg[, ncol(p_ugc_aggreg)])) != 0) { # While no empty last col on join \n    new_col = paste0(\"id_ugc\",i)\n    p_ugc_aggreg = p_ugc_aggreg %&gt;%\n      left_join(tab, by=c(\"id_ugc\"),suffix = c(\"\",i)) \n    p_ugc_aggreg = p_ugc_aggreg %&gt;% rename(!!new_col:= (ncol(p_ugc_aggreg)-tab_size+1), \"id_ugc\" = ncol(p_ugc_aggreg))\n    i = i+1\n  }\n  print(paste0(\"Nombre maximum de niveaux hierarchiques : \",i-1))\n  return(p_ugc_aggreg %&gt;% select(-tail(names(.), tab_size))) # Return and drop last n empty col\n}\n\nRécupération table aggrégée avec uniquement les labels + dernier filtrage/rename\n\np_ugc_aggreg = ugc_aggre(p_ugc_small) %&gt;% \n  select(id_ugc_cell, starts_with(\"libell\")) %&gt;% \n  rename_with(~ str_replace(., \"libelle\", \"Zone_niveau_\"), starts_with(\"libelle\"))\n\n\n\n\n\n\n\nAttention possible évolution a prévoir\n\n\n\nS’assurer que les libelles sont suffisants pour les établissements. Cas échéant, prévoir d’ajouter les codes\n\n\n\n\n2.1 Export format R\nConservation table nomenclature finale pour travail sur extractions entrées.\n\n#Output check\nhead(p_ugc_aggreg)\n\n\n# Export\nwrite.csv2(p_ugc_aggreg,paste0(ugcfilepath,output_filename), row.names = FALSE)\n\n\n2.1.1 Cleaning environnement\n\n# rm(list=ls())"
  },
  {
    "objectID": "QMD/dashboard_functions.html",
    "href": "QMD/dashboard_functions.html",
    "title": "Dashboard creation",
    "section": "",
    "text": "0.1 Création d’une base unique de suivi M0\nOn reprend une fusion de l’attendu et du réalisé qu’au augmente au cas par cas des variables necessaires aux tdb de suivi. Cette table est une alternative plus détaillée de la table m0_progress.\n\nstat_m0_db_func = function(all_to_meet_list, labeled_m0){\n  temp = all_to_meet_list %&gt;% left_join(labeled_m0, by = c(\"n_ecrou_initial\" = \"ecrou_init\")) %&gt;% \n    mutate(di = case_when(etablissement == \"CP LILLE ANNOEULLIN\" ~ \"Lille\",\n      etablissement == \"CP LILLE LOOS SEQUEDIN\" ~ \"Lille\",\n      etablissement == \"CP TOULOUSE SEYSSES\" ~ \"Toulouse\",\n      etablissement == \"MA FLEURY MEROGIS\"  ~ \"Paris\",\n      etablissement == \"MA MONTAUBAN\" ~ \"Toulouse\",\n      etablissement == \"MA STRASBOURG\" ~ \"Strasbourg\",\n      etablissement == \"MA VERSAILLES\" ~ \"Paris\",\n      TRUE ~ NA)) %&gt;% \n    select(di, everything())\n    return(temp)\n}\n\n\n\n0.2 Fonction de jauge\n\ngauge_func = function(stat_bd, min_target, max_target, sex){\n  value = stat_bd %&gt;% filter(sexe == sex &\n                                 consent == \"Accord\" &\n                                 m0_real %in% c(\"1\",\"Oui\")) %&gt;% nrow()\n\n  delta_value = stat_bd %&gt;% filter(sexe == sex &\n                                     consent == \"Accord\" &\n                                     m0_real %in% c(\"1\",\"Oui\") &\n                                     consent_X__CTIME &lt;= Sys.Date()-7) %&gt;% nrow()\n  day_since_begining = as.numeric(Sys.Date() - as.Date(\"2024-01-08\"))\n  total_duration = ifelse(sex == \"M\", round(6*30.5),round(8*30.5))\n\n  #projected_value = round(value/day_since_begining*total_duration)\n  projected_value = value\n\n  fig &lt;- plot_ly(\n    type = \"indicator\",\n    mode = \"gauge+number+delta\",\n    value = value,\n    delta = list(reference = delta_value, increasing = list(color = \"lightgreen\")),\n    gauge = list(\n      axis = list(range = list(NULL, max_target), tickwidth = 1, tickcolor = \"white\"),\n      bar = list(color = \"darkblue\"),\n      bgcolor = \"white\",\n      borderwidth = 2,\n      bordercolor = \"gray\",\n      steps = list(\n        list(range = c(0, min_target), color = \"lightgrey\"),\n        list(range = c(min_target, max_target), color = \"gray\")),\n        threshold = list(\n          line = list(color = \"darkred\", width = 2),\n          thickness = 0.75,\n          value = projected_value)\n  ))\n\n  fig &lt;- fig %&gt;%\n    layout(\n      margin = list(l=20,r=30),\n      paper_bgcolor = \"#343A40\",\n      font = list(color = \"white\", family = \"Arial\"))\n}\n\n\n\n0.3 Fonction sunburst\n\nsunburst_func = function(stat_db, sex){\n  # Data prep\n  stat_db = stat_db %&gt;% filter(sexe == sex)\n  all  = stat_db %&gt;% \n    group_by(consent) %&gt;% summarise(values=n()) %&gt;% \n    mutate(parents = \"   \",\n           consent = case_when(\n             is.na(consent) ~ \"En attente\",\n             TRUE ~ consent\n                               )\n           )\n  \n  no_inclus = stat_db %&gt;% filter(consent == \"Impossibilité\") %&gt;% \n    group_by(consent_impossible) %&gt;% summarise(values=n()) %&gt;% \n    mutate(parents = \"Impossibilité\") %&gt;% rename(consent= consent_impossible)\n  \n  inclus = stat_db %&gt;% filter(consent == \"Accord\") %&gt;% \n    group_by(m0_real) %&gt;% summarise(values=n()) %&gt;% \n    mutate(parents = \"Accord\") %&gt;% rename(consent= m0_real) %&gt;% \n    mutate(consent= case_when(consent %in% c(0,\"Non\",\"0\") ~ \"Interrompu\",\n                consent %in% c(1,\"Oui\",\"1\") ~ \"Complet\",\n                TRUE ~ NA\n    ))\n  \n  \n  temp = all %&gt;% rbind(no_inclus) %&gt;% rbind(inclus)\n  \n  # Figure execution\n  couleurs_par_modalite &lt;- setNames(\n    c(\"lightgray\", \"#f39c12\", \"#6f6f6f\", \"#e74c3c\", \"#00cc96\", \"#434343\"),\n    c('Hors délai', 'En attente', 'Impossibilité', 'Refus','Accord', 'Nouvelles entrées'))\n  \n  fig = plot_ly(data = temp, \n                 type = \"sunburst\", \n                 ids = ~consent, \n                 labels = ~consent, \n                 parents = ~parents, \n                 values = ~values, \n                 branchvalues = 'total',\n                 textinfo = 'label+value', # Afficher les étiquettes et les valeurs\n                 # insidetextorientation = 'radial', # Orientation du texte\n                 outsidetextfont = list(size = 20),\n                 marker = list(\n                   colors = sapply(temp$consent, function(x) couleurs_par_modalite[x]),\n                   line = list(width = 2)\n                               ),\n                 leaf = list(opacity = 0.8)) %&gt;%\n  layout(paper_bgcolor = '#343A40')\n\n  return(fig)\n}\n\n\n\n0.4 Fonction courbe rythme d’inclusion\n\ninclusion_curve = function(stat_db, sex = NA){\n  # Creating matching datafr\n  start_date = as.Date(\"2024-01-08\")\n  end_date= as.Date(Sys.Date())\n  date = seq(from = start_date, to = end_date, by = \"day\")\n  inclusion = as_tibble(date) %&gt;% rename(date = value) %&gt;% mutate(date = as.character(date))\n\n  if(!is.na(sex)){\n    stat_db = stat_db %&gt;% filter(sexe == sex)\n  }\n  stat_db$date_integr_base = as.character(as.Date(stat_db$consent_X__CTIME))\n  stat_db$date_integr_ajust = as.character(as.Date(stat_db$consent_X__CTIME) - 8)\n\n\n  # Adding entrances count\n  entrance_num = stat_db %&gt;% group_by(date_entree) %&gt;% summarise(count=n()) %&gt;% arrange(date_entree) %&gt;%\n    mutate( date_entree = as.character(date_entree),\n      nb_entree = cumsum(count)) %&gt;%  select(-count)\n\n  inclusion = inclusion %&gt;% left_join(entrance_num, by = c(\"date\"=\"date_entree\"))\n\n  vu = stat_db %&gt;% filter(!is.na(consent)) %&gt;%  group_by(date_integr_base) %&gt;% summarise(count=n()) %&gt;% mutate(nb_vu = cumsum(count)) %&gt;% select(-count)\n\n  vu_ajust = stat_db %&gt;% filter(!is.na(consent)) %&gt;%  group_by(date_integr_ajust) %&gt;% summarise(count=n()) %&gt;% mutate(nb_vu_ajust = cumsum(count)) %&gt;% select(-count)\n\n  inclusion = inclusion %&gt;% left_join(vu, by = c(\"date\"=\"date_integr_base\")) %&gt;% left_join(vu_ajust, by = c(\"date\"=\"date_integr_ajust\"))\n\n  inclusion = inclusion %&gt;% \n    mutate(\n      nb_vu_ajust = if_else(is.na(nb_vu_ajust), NA_real_, nb_vu_ajust),\n      nb_vu = if_else(is.na(nb_vu), NA_real_, nb_vu),\n      nb_entree = if_else(is.na(nb_entree), NA_real_, nb_entree)\n    ) %&gt;% \n    fill(nb_vu,nb_entree,nb_vu_ajust, .direction = \"down\")\n\n  start_date &lt;- as.Date(\"2024-01-07\")\n  end_date &lt;- as.Date(max(inclusion$date, na.rm = TRUE))\n  date_breaks &lt;- seq(from = start_date, to = end_date, by = \"7 days\")\n  date_liste = seq(from = as.Date(\"2024-01-10\"), to = end_date, by = \"7 days\")\n  new_list &lt;- as.data.frame(date_liste)\n  new_list$ylvl = 0\n\n  graph = ggplot(data = inclusion, aes(x = as.Date(date))) +\n    geom_line(aes(y = nb_entree, color = \"Nombre d'entrées cumulé\",group = 1),lwd = 1) +\n    geom_line(aes(y = nb_vu, color = \"Nombre d'enregistrements cumulé\",group = 1),lwd = 0.7) +\n    geom_line(aes(y = nb_vu_ajust, color = \"Nombre d'enregistrements cumulé ajusté (-8j)\",group = 1),lwd = 0.4) +\n    labs(x = \"Date\",\n         y = \"Effectif\",\n         color = \"\") +\n    scale_color_manual(values = c(\"Nombre d'entrées cumulé\" = \"black\", \"Nombre d'enregistrements cumulé\" = \"darkblue\", \"Nombre d'enregistrements cumulé ajusté (-8j)\" = \"darkgrey\")) +\n    theme_dark()+\n    theme(plot.background = element_rect(fill = \"#343A40\", color = \"#343A40\"),\n          panel.background = element_rect(fill = \"#343A40\", color = \"#343A40\"),\n          legend.background = element_rect(fill = \"#343A40\", color = \"#343A40\"),\n          legend.text = element_text(color = \"white\"),\n          legend.title = element_text(color = \"white\"),\n          axis.text.x = element_text(angle = 90, vjust = -0.5, hjust = 1, color = \"white\"),\n          axis.text.y = element_text(color = \"white\"),\n          axis.title.x = element_text(color = \"white\"),\n          axis.title.y = element_text(color = \"white\"),\n          legend.position = \"bottom\") +\n    ylim(0, NA)+\n    theme(axis.text.x = element_text(angle = 90, vjust = -0.5, hjust = 1),\n          legend.position = \"bottom\")+\n    scale_x_date(date_breaks = \"1 month\", date_labels = \"%Y-%m-%d\") +\n    geom_vline(xintercept = as.numeric(date_breaks), linetype = \"dashed\", color = \"white\", linewidth = 0.3) +\n    geom_point(data = new_list, aes(y = ylvl, x = date_liste),color=\"black\")\n\n  return(graph)\n}\n\n\n\n0.5 Fonction aggregation graphiques\n\ngraph_return = function(stat_db,di_f= \"\"){\n  if(di_f!=\"\"){\n    stat_db = stat_db %&gt;% filter(di == di_f)\n  } else {stat_db = stat_db}\n  # stat_db = stat_m0_db\n  \n  \n  stat_db = stat_db %&gt;%\n  select(n_ecrou_initial, di, sexe, etablissement, consent, consent_impossible, date_entree, m0_real, consent_X__CTIME) %&gt;%\n  distinct() %&gt;%\n  group_by(n_ecrou_initial, etablissement) %&gt;%\n  slice(1) %&gt;%\n  ungroup()\n  \n  # Données valueboxes\n  nb_entree = nrow(stat_db)\n  nb_accord = stat_db %&gt;% filter(consent == \"Accord\") %&gt;% nrow()\n  nb_refus = stat_db %&gt;% filter(consent == \"Refus\") %&gt;% nrow()\n  nb_imposs = stat_db %&gt;% filter(consent == \"Impossibilité\") %&gt;% nrow()\n  nb_HD = stat_db %&gt;% filter(consent == \"Hors délai\") %&gt;% nrow()\n  nb_attente = stat_db %&gt;% filter(is.na(consent)) %&gt;% nrow()\n  \n  # Jauge inclusion H/F\n  gauge_h = gauge_func(stat_db,800,1000, \"M\")\n  gauge_f = gauge_func(stat_db,200,300, \"F\")\n\n  # Sunburst\n  if(di_f == \"Strasbourg\"){\n    sunb_h = NULL\n  } else{sunb_h = sunburst_func(stat_db,\"M\")}\n  sunb_f = sunburst_func(stat_db,\"F\")\n  \n  #Rythme inclusion\n  rythm_h = inclusion_curve(stat_db,\"M\")\n  rythm_f = inclusion_curve(stat_db,\"F\")\n  rythm_ens = inclusion_curve(stat_db)\n  \n  graph = list(\n    nb_entree = nb_entree,\n    nb_accord = nb_accord,\n    nb_refus = nb_refus,\n    nb_imposs = nb_imposs,\n    nb_HD = nb_HD,\n    nb_attente = nb_attente,\n    sunb_h = sunb_h,\n    sunb_f = sunb_f,\n    gauge_h = gauge_h,\n    gauge_f = gauge_f,\n    rythm_f= rythm_f,\n    rythm_h = rythm_h,\n    rythm_ens = rythm_ens\n  )\n  return(graph)\n}\n\n\n\n0.6 Cleveland graph of prevalence\n\n# library(readxl)\n# library(ggplot2)\n# library(dplyr)\n# library(reshape2)\n\n\n# filepath = \"/data/source/others/tab_prevalence_revue_Eck.xlsx\"\n# prev_table = read_excel(filepath, sheet = \"Sheet1\")\n# nomenc = read_excel(filepath, sheet = \"Légende\")\n# nomenc = nomenc[order(nomenc$ordre),]\n# \n# valeurs = melt(prev_table, id = c(\"publication\",\"quali_publi\"))\n# valeurs = valeurs %&gt;% filter(value &gt; 0)\n# valeurs$value = valeurs$value / 100\n# \n# result = merge(x = valeurs, y = nomenc,by.x = \"variable\", by.y = \"var\",all.x = TRUE)\n# \n# \n# \n# graph = ggplot(result, aes(x=factor(label, level=nomenc$label), value,))+\n#   coord_flip()+\n#   geom_line(aes(group = variable)) + \n#   geom_point(aes(color = quali_publi))+\n#   labs(title = \"\",\n#        subtitle = \"\",\n#        y = \"Prévalences estimées\",\n#        x = \"\",\n#        caption = \"\"\n#   ) + scale_color_manual(values=c(\"#0fb80d\", \"#d21404\", \"#d27904\"))+\n#   scale_y_continuous(labels = scales::percent)+\n#   theme_bw() + theme(legend.position=\"none\") +\n#   theme(axis.text.y = element_text(face = nomenc$font))\n# \n# graph\n\n# ggsave(\"marion_cleveland.png\", width = 1920*2, height = 1080*2, units = \"px\")",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "Dashboard creation"
    ]
  },
  {
    "objectID": "QMD/db_preprocessing_files.html",
    "href": "QMD/db_preprocessing_files.html",
    "title": "db_files_processinf",
    "section": "",
    "text": "db_result_monitoring = function(){\n  db_last_path = max(list.dirs(\"data/source/db_epsylon_results/\", recursive = FALSE, full.names = TRUE))  \n  return(db_last_path)\n}",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "db_files_processinf"
    ]
  },
  {
    "objectID": "QMD/db_preprocessing_files.html#most-recent-db_file-localisation-localize-most-recent-downloaded-db-files",
    "href": "QMD/db_preprocessing_files.html#most-recent-db_file-localisation-localize-most-recent-downloaded-db-files",
    "title": "db_files_processinf",
    "section": "1 Most recent db_file localisation Localize most recent downloaded DB files",
    "text": "1 Most recent db_file localisation Localize most recent downloaded DB files\n\ndb_finding = function(db_last_path, step){\n  fold = case_when(\n    step == \"m0\" ~ \"\",\n    step == \"m3\" ~ \"-m3\",\n    step == \"m9\" ~ \"-m6\",\n    TRUE ~ NA\n  )\n  db_path  = paste0(db_last_path,\"/epsylon\",fold,\"/DB/\")\n  db_list = list.files(db_path,pattern = \"\\\\.db$\", full.names = TRUE)\n}",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "db_files_processinf"
    ]
  },
  {
    "objectID": "QMD/db_preprocessing_files.html#m0-db-files-aggregation",
    "href": "QMD/db_preprocessing_files.html#m0-db-files-aggregation",
    "title": "db_files_processinf",
    "section": "2 M0 DB files aggregation",
    "text": "2 M0 DB files aggregation\n\nm0_db_aggreg = function(db_list){\n  i=1\n  concatenated_table_m0 = data.frame()\n  for (db in db_list) {\n      # Connect to the SQLite DB\n    con &lt;- dbConnect(RSQLite::SQLite(), db)\n    print(paste0(\"DB en cours de traitement : \", db))\n    \n    tables &lt;- dbListTables(con)\n    \n    center_fusion = data.frame()\n  \n    tables_order = list(\"consent\" ,\"sd\" ,\"pss\" ,\"asrs\" ,\"lec5\" ,\"intro_mini_m0\" ,\"modulea\" ,\"moduleb\",\"modulec\" ,\"moduled\" ,\"modulef\" ,\"moduleg\" ,\"moduleh\" ,\"modulei0_cust\" ,\"modulei\" ,\"modulej\" ,\"modulek\" ,\"modulen\" ,\"modulep\" ,\"clot\")\n    \n    for (table in tables_order) {\n      if (table == \"_goupile\"){next}\n      data &lt;- dbReadTable(con, table)\n      print(paste0(\"        Table : \", table))\n      #colnames(data) &lt;- paste(table, colnames(data), sep = \"_\")\n      \n      #Ajout d'un prefixe aux colonne de creation/modif pour conserver les info\n      #de chaque formulaire + gestion des noms de col numérique retransformé par\n      #R par l'ajout d'un caractère X en début. On réaffecte le nom du formulaire\n      data = data %&gt;% rename_with( ~ if_else(str_starts(., \"X__\") & . != \"X__ROOT\", str_c(paste0(table,\"_\"), .), .), starts_with(\"X__\"))\n      data = data %&gt;% rename_with( ~ if_else(str_starts(., \"X\") & . != \"X__ROOT\", str_replace(., \"X\", paste0(table,\"_\")), .), starts_with(\"X\"))\n      \n      \n      # Correction à la volée des erreurs de nom de col à la progra initiale\n      if(table == \"asrs\"){data = data %&gt;% rename(asrs_incarc_impact = pss_incarc_impact)}\n      \n      \n      if (nrow(center_fusion) == 0) {\n        center_fusion &lt;- data\n      } else {\n        # Perform a join operation based on the 'X__ROOT' column\n        center_fusion &lt;- full_join(center_fusion, data, by = \"X__ROOT\")\n      }\n    }\n    center_fusion &lt;- center_fusion %&gt;% mutate(across(starts_with(\"severity_score_\"), as.character))\n    assign(paste0(\"synthese_\",i),center_fusion)\n  \n    concatenated_table_m0 &lt;- bind_rows(concatenated_table_m0,center_fusion)\n    \n    # Disconnect from DB\n    dbDisconnect(con)\n    print(i)\n    i=i+1\n  }\n  return(concatenated_table_m0)\n}",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "db_files_processinf"
    ]
  },
  {
    "objectID": "QMD/db_preprocessing_files.html#m3-db-files-aggregation",
    "href": "QMD/db_preprocessing_files.html#m3-db-files-aggregation",
    "title": "db_files_processinf",
    "section": "3 M3 DB files aggregation",
    "text": "3 M3 DB files aggregation\n\nm3_db_aggreg = function(db_list){\n  i=1\n  \n  concatenated_table_m3 = data.frame()\n  for (db in db_list) {\n    # Connect to the SQLite DB\n    con &lt;- dbConnect(RSQLite::SQLite(), db)\n    print(paste0(\"DB en cours de traitement : \", db))\n    \n    tables &lt;- dbListTables(con)\n    \n    if(length(tables) &lt; 2){next}\n    center_fusion = data.frame()\n    \n    tables_order = list(\"consent\" ,\"pss\",\"intro_mini_m0\" ,\"modulea\" ,\"moduleb\",\"modulec\" ,\"moduled\" ,\"modulef\" ,\"moduleg\" ,\"moduleh\" ,\"modulej\" ,\"modulek\" ,\"modulen\" ,\"conso_besoin_m3\", \"isi\" ,\"clot\")\n    \n    for (table in tables_order) {\n      if (table == \"_goupile\" || !(table %in% tables)){next}\n      data &lt;- dbReadTable(con, table)\n      print(paste0(\"        Table : \", table))\n      #colnames(data) &lt;- paste(table, colnames(data), sep = \"_\")\n      \n      #Ajout d'un prefixe aux colonne de creation/modif pour conserver les info\n      #de chaque formulaire + gestion des noms de col numérique retransformé par\n      #R par l'ajout d'un caractère X en début. On réaffecte le nom du formulaire\n      data = data %&gt;% rename_with( ~ if_else(str_starts(., \"X__\") & . != \"X__ROOT\", str_c(paste0(table,\"_\"), .), .), starts_with(\"X__\"))\n      data = data %&gt;% rename_with( ~ if_else(str_starts(., \"X\") & . != \"X__ROOT\", str_replace(., \"X\", paste0(table,\"_\")), .), starts_with(\"X\"))\n      \n      \n      # Correction à la volée des erreurs de nom de col à la progra initiale\n      if(table == \"asrs\"){data = data %&gt;% rename(asrs_incarc_impact = pss_incarc_impact)}\n      \n      \n      if (nrow(center_fusion) == 0) {\n        center_fusion &lt;- data\n      } else {\n        # Perform a join operation based on the 'X__ROOT' column\n        center_fusion &lt;- full_join(center_fusion, data, by = \"X__ROOT\")\n      }\n    }\n    center_fusion &lt;- center_fusion %&gt;% mutate(across(starts_with(\"severity_score_\"), as.character))\n    assign(paste0(\"synthese_\",i),center_fusion)\n    \n    concatenated_table_m3 &lt;- bind_rows(concatenated_table_m3,center_fusion)\n    \n    # Disconnect from DB\n    dbDisconnect(con)\n    print(i)\n    i=i+1\n  }\n  return(concatenated_table_m3)\n}",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "db_files_processinf"
    ]
  },
  {
    "objectID": "QMD/db_preprocessing_files.html#m9-db-files-aggregation",
    "href": "QMD/db_preprocessing_files.html#m9-db-files-aggregation",
    "title": "db_files_processinf",
    "section": "4 M9 DB files aggregation",
    "text": "4 M9 DB files aggregation\n\nm9_db_aggreg = function(db_list){\n  i=1\n  \n  concatenated_table_m9 = data.frame()\n  for (db in db_list) {\n    # Connect to the SQLite DB\n    con &lt;- dbConnect(RSQLite::SQLite(), db)\n    print(paste0(\"DB en cours de traitement : \", db))\n    \n    tables &lt;- dbListTables(con)\n    \n    if(length(tables) &lt; 2){next}\n    center_fusion = data.frame()\n    \n    tables_order = list(\"consent_m9\" ,\"pss_m9\",\"intro_mini_m0_m9\" ,\"modulea_m9\" ,\"moduleb_m9\",\"modulec_m9\" ,\"moduled_m9\" ,\"modulef_m9\" ,\"moduleg_m9\" ,\"moduleh_m9\" ,\"modulej_m9\" ,\"modulek_m9\" ,\"modulen_m9\" ,\"conso_besoin_m9\", \"isi_m9\" ,\"clot_m9\")\n    \n    for (table in tables_order) {\n      if (table == \"_goupile\" || !(table %in% tables)){next}\n      data &lt;- dbReadTable(con, table)\n      print(paste0(\"        Table : \", table))\n      #colnames(data) &lt;- paste(table, colnames(data), sep = \"_\")\n      \n      #Ajout d'un prefixe aux colonne de creation/modif pour conserver les info\n      #de chaque formulaire + gestion des noms de col numérique retransformé par\n      #R par l'ajout d'un caractère X en début. On réaffecte le nom du formulaire\n      data = data %&gt;% rename_with( ~ if_else(str_starts(., \"X__\") & . != \"X__ROOT\", str_c(paste0(table,\"_\"), .), .), starts_with(\"X__\"))\n      data = data %&gt;% rename_with( ~ if_else(str_starts(., \"X\") & . != \"X__ROOT\", str_replace(., \"X\", paste0(table,\"_\")), .), starts_with(\"X\"))\n      \n      \n      # Correction à la volée des erreurs de nom de col à la progra initiale\n      if(table == \"asrs\"){data = data %&gt;% rename(asrs_incarc_impact = pss_incarc_impact)}\n      \n      \n      if (nrow(center_fusion) == 0) {\n        center_fusion &lt;- data\n      } else {\n        # Perform a join operation based on the 'X__ROOT' column\n        center_fusion &lt;- full_join(center_fusion, data, by = \"X__ROOT\")\n      }\n    }\n    center_fusion &lt;- center_fusion %&gt;% mutate(across(starts_with(\"severity_score_\"), as.character))\n    assign(paste0(\"synthese_\",i),center_fusion)\n    \n    concatenated_table_m9 &lt;- bind_rows(concatenated_table_m9,center_fusion)\n    \n    # Disconnect from DB\n    dbDisconnect(con)\n    print(i)\n    i=i+1\n  }\n  return(concatenated_table_m9)\n}",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "db_files_processinf"
    ]
  },
  {
    "objectID": "QMD/db_preprocessing_files.html#labeling-database",
    "href": "QMD/db_preprocessing_files.html#labeling-database",
    "title": "db_files_processinf",
    "section": "5 Labeling database",
    "text": "5 Labeling database\n\nlabeling_db = function(database){\n  \n  source(\"QMDtoR/labels/epsylon_labels.R\")\n  labeled_table &lt;- database\nprint(\"test\")\n# Liste des noms des colonnes à traiter\n  col_names = colnames(labeled_table)\n  \n  \n  for (col_name in col_names) {\n  \n    if (exists(col_name)) {\n      if(typeof(get(col_name, mode = \"any\")) != \"closure\"){\n      # Remplacement des valeurs selon le dictionnaire correspondant\n      labeled_table[[col_name]] &lt;- get(col_name)[as.character(labeled_table[[col_name]])]\n      }}\n    #Remplacement si variable listées comme dichotomique\n    else if(col_name %in% list_var_dicho){\n      labeled_table[[col_name]] = dicho_answ[as.character(labeled_table[[col_name]])]\n    }\n  }\n  return(labeled_table)\n}",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "db_files_processinf"
    ]
  },
  {
    "objectID": "QMD/db_preprocessing_files.html#export-exploitable-database",
    "href": "QMD/db_preprocessing_files.html#export-exploitable-database",
    "title": "db_files_processinf",
    "section": "6 Export exploitable database",
    "text": "6 Export exploitable database\n\nwrite_db_xlsx = function(wave, aggreged, skim_aggreged, labeled, skim_labeled_m0){\n\n  liste_onglets &lt;- list(aggreged, skim_aggreged, labeled, skim_labeled_m0)\n  \n  names(liste_onglets) &lt;- c(paste0(\"aggreged_\", wave),\n                            paste0(\"skim_aggreged_\", wave),\n                            paste0(\"labeled_\", wave),\n                            paste0(\"skim_labeled_\", wave))\n  \n  write_xlsx(liste_onglets, paste0(\"data/output/final_epsylon_DB/\",Sys.Date(),\"_\", wave,\"_BDD epsylon.xlsx\"))\n}",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "db_files_processinf"
    ]
  },
  {
    "objectID": "QMD/epsylon_labels.html",
    "href": "QMD/epsylon_labels.html",
    "title": "epsylon_dictionnaries",
    "section": "",
    "text": "Ce script regroupe l’ensembles des dictionnaires des bases M0, M3 et M9 pour ajout des labels sur table finalisée\n\n\n\ndicho_answ = c(\"0\" = \"Non\",\"1\" = \"Oui\", \"99\" = \"Ne sait pas\", \"999\" = \"Incertain\")\n\nlist_var_dicho = list(\n  #SD\n  \"sd_301a\",\"sd_404\",\"sd_508\",\"sd_602\",\"sd_603\",\"sd_604\",\"sd_607\",\"sd_703\",\"sd_704\",\"sd_705b\",\"sd_708\",\"sd_709\",\"sd_709a\",\"sd_710\",\"sd_711\",\"sd_712\",\"sd_714\",\"sd_402.1\",\"sd_402.2\",\"sd_402.3\",\"sd_402.4\",\"sd_402.5\",\"sd_403.1\",\"sd_403.2\",\"sd_403.3\",\"sd_404.0\",\"sd_404.1\",\"sd_404.99\",\"sd_507\",\"sd_600.1\",\"sd_600.2\",\"sd_600.3\",\"sd_600.4\",\"sd_600.5\",\"sd_600.6\",\"sd_601.1\",\"sd_601.2\",\"sd_601.3\",\"sd_601.4\",\"sd_601.5\",\"sd_601.6\",\"sd_606.1\",\"sd_606.2\",\"sd_606.3\",\"sd_606.4\",\"sd_606.5\",\"sd_606.6\",\"sd_705.0\",\"sd_705.1\",\"sd_705.2\",\"sd_705.3\",\"sd_705.99\",\"sd_705c.1\",\"sd_705c.2\",\"sd_705c.3\",\"sd_710a.1\",\"sd_710a.2\",\"sd_710a1.1\",\"sd_710a1.2\",\"sd_710a1.3\",\"sd_710a2.1\",\"sd_710a2.2\",\"sd_710a2.99\",\"sd_715.1\",\"sd_715.2\",\"sd_715.3\",\"sd_715.4\",\n\n  #ASRS\n  \"adhd\",\n  \n  \n  #LEC\n  \"lec5_1.5\",\"lec5_2.0\",\"lec5_2.1\",\"lec5_3.0\",\"lec5_3.1\",\"lec5_3.2\",\"lec5_4.0\",\"lec5_4.1\",\"lec5_5.2\",\"lec5_5.3\",\"lec5_5.0\",\"lec5_6.0\",\"lec5_6.1\",\"lec5_6.2\",\"lec5_7.0\",\"lec5_8.0\",\"lec5_8.1\",\"lec5_8.2\",\"lec5_9.0\",\"lec5_7.1\",\"lec5_7.2\",\"lec5_2.5\",\"lec5_3.5\",\"lec5_4.5\",\"lec5_5.5\",\"lec5_6.5\",\"lec5_7.4\",\"lec5_7.5\",\"lec5_8.5\",\"lec5_10.2\",\"lec5_11.2\",\"lec5_9.5\",\"lec5_10.0\",\"lec5_10.1\",\"lec5_12.0\",\"lec5_10.5\",\"lec5_11.5\",\"lec5_12.1\",\"lec5_12.2\",\"lec5_13.0\",\"lec5_13.1\",\"lec5_12.5\",\"lec5_13.2\",\"lec5_13.5\",\"lec5_14.2\",\"lec5_13.5\",\"lec5_14.0\",\"lec5_14.1\",\"lec5_14.5\",\"lec5_15.0\",\"lec5_15.2\",\"lec5_15.5\",\"lec5_16.0\",\"lec5_16.1\",\"lec5_16.2\",\"lec5_16.5\",\"lec5_17.0\",\"lec5_17.1\",\"lec5_17.2\",\"lec5_17.5\",\"lec5_1.0\",\"lec5_1_child\",\"lec5_1.1\",\"lec5_2.2\",\"lec5_2.3\",\"lec5_4.3\",\"lec5_4.2\",\"lec5_9.2\",\"lec5_5.4\",\"lec5_6.3\",\"lec5_6.4\",\"lec5_7.3\",\"lec5_8.4\",\"lec5_10.3\",\"lec5_10.4\",\"lec5_11.3\",\"lec5_12.3\",\"lec5_13.3\",\"lec5_14.3\",\"lec5_15.3\",\"lec5_16.3\",\"lec5_13.4\",\"lec5_11.0\",\"lec5_11.1\",\"lec5_11.4\",\"lec5_15.4\",\"lec5_15.1\",\"lec5_17.4\",\"lec5_1.2\",\"lec5_2_child\",\"lec5_3_child\",\"lec5_4_child\",\"lec5_5_child\",\"lec5_6_child\",\"lec5_10_child\",\"lec5_7_child\",\"lec5_8_child\",\"lec5_9_child\",\"lec5_12_child\",\"lec5_11_child\",\"lec5_13_child\",\"lec5_17_child\",\"lec5_14_child\",\"lec5_16_child\",\"lec5_15_child\",\n  \n  # MINI A\n  \"a1a\",\"a1b\",\"a2a\",\"a2b\",\"a3a_actual\",\"a3b_actual\",\"a3c_actual\",\"a3d_actual\",\"a3e_actual\",\"a3e1_actual\",\"a3f_actual\",\"a3g_actual\",\"a4_actual\",\"a3a_past\",\"a3b_past\",\"a3c_past\",\"a3d_past\",\"a3e_past\",\"a3e1_past\",\"a3f_past\",\"a3g_past\",\"a4_past\",\"a5_past\", \"moda_drug_causes_actual\", \"moda_disease_causes_actual\", \"moda_drug_causes_past\", \"moda_disease_causes_past\",\"maj_depress_actual\", \"maj_depress_past\", \"maj_depress_recur\",\"moda_ccl_causes_actual\",\"moda_ccl_causes_actual\",\"moda_ccl_causes_past\",\n\n  \n  # MINI B\n  \"b1\",\"b1a\",\"b1b\",\"b2\",\"b3\",\"b4\",\"b4a\",\"b4b\",\"b5\",\"b6\",\"b7\",\"b8\",\"b9\",\"b10\",\"b10a\",\"b10b\",\"b11\",\"b11a\",\"b11b\",\"b12\",\"b12a\",\"b12b\",\"b12c\",\"b12d\",\"b13\",\"b14\",\"b14a\",\"b14b\",\"b14c\",\"b15\",\"b16\",\"b16a\",\"b16b\",\"b16c\",\"b18\",\"b18b1\",\"b18b2\",\n  \n  # MINI C\n  \"c0\",\"c1a\",\"c1b\",\"c2a\",\"c2b\",\"c3a_actual\",\"c3a1_actual\",\"c3b_actual\",\"c3c_actual\",\"c3d_actual\",\"c3e_actual\",\"c3f_actual\",\"c3g_actual\",\"c5_actual\",\"c6_actual\",\"c7_actual\",\"c3a_past\",\"c3a1_past\",\"c3b_past\",\"c3c_past\",\"c3d_past\",\"c3e_past\",\"c3f_past\",\"c3g_past\",\"c5_past\",\"c6_past\",\"c7_past\",\"c8a_past\",\"c8b_past\",\"c8c_past\",\"c8a_actual\",\"c8b_actual\",\"c8c_actual\", \"modc_drug_causes_actual\", \"modc_disease_causes_actual\", \"modc_drug_causes_past\", \"modc_disease_causes_past\",\n\n  \n  #MINI D\n  \"d1a\",\"d1b\",\"d2\",\"d3\",\"d4a\",\"d4b\",\"d4c\",\"d4d\",\"d4e\",\"d4f\",\"d4g\",\"d4h\",\"d4i\",\"d4j\",\"d4k\",\"d4l\",\"d4m\",\"d6\", \"modd_drug_causes_actual\", \"modd_disease_causes_actual\", \"modd_drug_causes_past\", \"modd_disease_causes_past\",\n\n  \n  #MINI F\n  \"f1\",\"f2\",\"f3\",\"f4\",\"f5\",\"f6\",\"public_tas\", \"modf_drug_causes_past\", \"modf_disease_causes_past\",\n\n  \n  #MINI G\n  \"g1a\", \"g1b\", \"g2\", \"g3a\", \"g3b\", \"g4\", \"tic_related\",\"modg_drug_causes_actual\", \"modg_disease_causes_actual\",\n  \n  #MINI H\n  \"h1\",\"h2\",\"h3a\",\"h3b\",\"h4a\",\"h4b\",\"h4c\",\"h4d\",\"h4e\",\"h4f\",\"h4g\",\"h5a\",\"h5b\",\"h5c\",\"h5d\",\"h5e\",\"h5f\",\"h6\",\"h7\",\n  \n  #MINI I\n  \"i1\",\"i2a\",\"i2b\",\"i2c\",\"i2d\",\"i2e\",\"i2f\",\"i2g\",\"i2h\",\"i2i\",\"i2j\",\"i2k2\",\"controled_env\",\n  \n  #MINI K\n  \"k1a\", \"k1b\", \"k2a\", \"k2b\", \"k3a\", \"k3b\", \"k4a\", \"k4b\", \"k5a\", \"k5b\", \"k6a\", \"k6a1\", \"k6b\", \"k6b1\", \"k7a\", \"k7b\", \"k8a\", \"k8b\", \"k9a\", \"k9b\", \"k10a\", \"k10b\", \"k11a\", \"k11b\", \"sympt_psy_multi_act\", \n  \n  # MINI N\n  \"n1a\", \"n1b\", \"n1c\", \"n2\", \"n3a\", \"n3b\", \"n3c\", \"n3d\", \"n3e\", \"n3f\", \"n4\", \n  \n  # MINI P\n  \"p1a\", \"p1b\", \"p1c\", \"p1d\", \"p1e\", \"p1f\", \"p2a\", \"p2b\", \"p2c\", \"p2d\", \"p2e\", \"p2f\", \"p2g\", \n  \n  # Cloture\n  \"m0_real\", \"danger_immed\", \"exclus_enq\",\n  \"m3_real\", \"m3_danger_immed\", \"m3_exclus_enq\"\n\n  \n  \n  )",
    "crumbs": [
      "Intégration données d'enquête",
      "Nomenclatures",
      "epsylon_dictionnaries"
    ]
  },
  {
    "objectID": "QMD/epsylon_labels.html#liste-des-dictionnaires-des-bases-epsylon",
    "href": "QMD/epsylon_labels.html#liste-des-dictionnaires-des-bases-epsylon",
    "title": "epsylon_dictionnaries",
    "section": "",
    "text": "Ce script regroupe l’ensembles des dictionnaires des bases M0, M3 et M9 pour ajout des labels sur table finalisée\n\n\n\ndicho_answ = c(\"0\" = \"Non\",\"1\" = \"Oui\", \"99\" = \"Ne sait pas\", \"999\" = \"Incertain\")\n\nlist_var_dicho = list(\n  #SD\n  \"sd_301a\",\"sd_404\",\"sd_508\",\"sd_602\",\"sd_603\",\"sd_604\",\"sd_607\",\"sd_703\",\"sd_704\",\"sd_705b\",\"sd_708\",\"sd_709\",\"sd_709a\",\"sd_710\",\"sd_711\",\"sd_712\",\"sd_714\",\"sd_402.1\",\"sd_402.2\",\"sd_402.3\",\"sd_402.4\",\"sd_402.5\",\"sd_403.1\",\"sd_403.2\",\"sd_403.3\",\"sd_404.0\",\"sd_404.1\",\"sd_404.99\",\"sd_507\",\"sd_600.1\",\"sd_600.2\",\"sd_600.3\",\"sd_600.4\",\"sd_600.5\",\"sd_600.6\",\"sd_601.1\",\"sd_601.2\",\"sd_601.3\",\"sd_601.4\",\"sd_601.5\",\"sd_601.6\",\"sd_606.1\",\"sd_606.2\",\"sd_606.3\",\"sd_606.4\",\"sd_606.5\",\"sd_606.6\",\"sd_705.0\",\"sd_705.1\",\"sd_705.2\",\"sd_705.3\",\"sd_705.99\",\"sd_705c.1\",\"sd_705c.2\",\"sd_705c.3\",\"sd_710a.1\",\"sd_710a.2\",\"sd_710a1.1\",\"sd_710a1.2\",\"sd_710a1.3\",\"sd_710a2.1\",\"sd_710a2.2\",\"sd_710a2.99\",\"sd_715.1\",\"sd_715.2\",\"sd_715.3\",\"sd_715.4\",\n\n  #ASRS\n  \"adhd\",\n  \n  \n  #LEC\n  \"lec5_1.5\",\"lec5_2.0\",\"lec5_2.1\",\"lec5_3.0\",\"lec5_3.1\",\"lec5_3.2\",\"lec5_4.0\",\"lec5_4.1\",\"lec5_5.2\",\"lec5_5.3\",\"lec5_5.0\",\"lec5_6.0\",\"lec5_6.1\",\"lec5_6.2\",\"lec5_7.0\",\"lec5_8.0\",\"lec5_8.1\",\"lec5_8.2\",\"lec5_9.0\",\"lec5_7.1\",\"lec5_7.2\",\"lec5_2.5\",\"lec5_3.5\",\"lec5_4.5\",\"lec5_5.5\",\"lec5_6.5\",\"lec5_7.4\",\"lec5_7.5\",\"lec5_8.5\",\"lec5_10.2\",\"lec5_11.2\",\"lec5_9.5\",\"lec5_10.0\",\"lec5_10.1\",\"lec5_12.0\",\"lec5_10.5\",\"lec5_11.5\",\"lec5_12.1\",\"lec5_12.2\",\"lec5_13.0\",\"lec5_13.1\",\"lec5_12.5\",\"lec5_13.2\",\"lec5_13.5\",\"lec5_14.2\",\"lec5_13.5\",\"lec5_14.0\",\"lec5_14.1\",\"lec5_14.5\",\"lec5_15.0\",\"lec5_15.2\",\"lec5_15.5\",\"lec5_16.0\",\"lec5_16.1\",\"lec5_16.2\",\"lec5_16.5\",\"lec5_17.0\",\"lec5_17.1\",\"lec5_17.2\",\"lec5_17.5\",\"lec5_1.0\",\"lec5_1_child\",\"lec5_1.1\",\"lec5_2.2\",\"lec5_2.3\",\"lec5_4.3\",\"lec5_4.2\",\"lec5_9.2\",\"lec5_5.4\",\"lec5_6.3\",\"lec5_6.4\",\"lec5_7.3\",\"lec5_8.4\",\"lec5_10.3\",\"lec5_10.4\",\"lec5_11.3\",\"lec5_12.3\",\"lec5_13.3\",\"lec5_14.3\",\"lec5_15.3\",\"lec5_16.3\",\"lec5_13.4\",\"lec5_11.0\",\"lec5_11.1\",\"lec5_11.4\",\"lec5_15.4\",\"lec5_15.1\",\"lec5_17.4\",\"lec5_1.2\",\"lec5_2_child\",\"lec5_3_child\",\"lec5_4_child\",\"lec5_5_child\",\"lec5_6_child\",\"lec5_10_child\",\"lec5_7_child\",\"lec5_8_child\",\"lec5_9_child\",\"lec5_12_child\",\"lec5_11_child\",\"lec5_13_child\",\"lec5_17_child\",\"lec5_14_child\",\"lec5_16_child\",\"lec5_15_child\",\n  \n  # MINI A\n  \"a1a\",\"a1b\",\"a2a\",\"a2b\",\"a3a_actual\",\"a3b_actual\",\"a3c_actual\",\"a3d_actual\",\"a3e_actual\",\"a3e1_actual\",\"a3f_actual\",\"a3g_actual\",\"a4_actual\",\"a3a_past\",\"a3b_past\",\"a3c_past\",\"a3d_past\",\"a3e_past\",\"a3e1_past\",\"a3f_past\",\"a3g_past\",\"a4_past\",\"a5_past\", \"moda_drug_causes_actual\", \"moda_disease_causes_actual\", \"moda_drug_causes_past\", \"moda_disease_causes_past\",\"maj_depress_actual\", \"maj_depress_past\", \"maj_depress_recur\",\"moda_ccl_causes_actual\",\"moda_ccl_causes_actual\",\"moda_ccl_causes_past\",\n\n  \n  # MINI B\n  \"b1\",\"b1a\",\"b1b\",\"b2\",\"b3\",\"b4\",\"b4a\",\"b4b\",\"b5\",\"b6\",\"b7\",\"b8\",\"b9\",\"b10\",\"b10a\",\"b10b\",\"b11\",\"b11a\",\"b11b\",\"b12\",\"b12a\",\"b12b\",\"b12c\",\"b12d\",\"b13\",\"b14\",\"b14a\",\"b14b\",\"b14c\",\"b15\",\"b16\",\"b16a\",\"b16b\",\"b16c\",\"b18\",\"b18b1\",\"b18b2\",\n  \n  # MINI C\n  \"c0\",\"c1a\",\"c1b\",\"c2a\",\"c2b\",\"c3a_actual\",\"c3a1_actual\",\"c3b_actual\",\"c3c_actual\",\"c3d_actual\",\"c3e_actual\",\"c3f_actual\",\"c3g_actual\",\"c5_actual\",\"c6_actual\",\"c7_actual\",\"c3a_past\",\"c3a1_past\",\"c3b_past\",\"c3c_past\",\"c3d_past\",\"c3e_past\",\"c3f_past\",\"c3g_past\",\"c5_past\",\"c6_past\",\"c7_past\",\"c8a_past\",\"c8b_past\",\"c8c_past\",\"c8a_actual\",\"c8b_actual\",\"c8c_actual\", \"modc_drug_causes_actual\", \"modc_disease_causes_actual\", \"modc_drug_causes_past\", \"modc_disease_causes_past\",\n\n  \n  #MINI D\n  \"d1a\",\"d1b\",\"d2\",\"d3\",\"d4a\",\"d4b\",\"d4c\",\"d4d\",\"d4e\",\"d4f\",\"d4g\",\"d4h\",\"d4i\",\"d4j\",\"d4k\",\"d4l\",\"d4m\",\"d6\", \"modd_drug_causes_actual\", \"modd_disease_causes_actual\", \"modd_drug_causes_past\", \"modd_disease_causes_past\",\n\n  \n  #MINI F\n  \"f1\",\"f2\",\"f3\",\"f4\",\"f5\",\"f6\",\"public_tas\", \"modf_drug_causes_past\", \"modf_disease_causes_past\",\n\n  \n  #MINI G\n  \"g1a\", \"g1b\", \"g2\", \"g3a\", \"g3b\", \"g4\", \"tic_related\",\"modg_drug_causes_actual\", \"modg_disease_causes_actual\",\n  \n  #MINI H\n  \"h1\",\"h2\",\"h3a\",\"h3b\",\"h4a\",\"h4b\",\"h4c\",\"h4d\",\"h4e\",\"h4f\",\"h4g\",\"h5a\",\"h5b\",\"h5c\",\"h5d\",\"h5e\",\"h5f\",\"h6\",\"h7\",\n  \n  #MINI I\n  \"i1\",\"i2a\",\"i2b\",\"i2c\",\"i2d\",\"i2e\",\"i2f\",\"i2g\",\"i2h\",\"i2i\",\"i2j\",\"i2k2\",\"controled_env\",\n  \n  #MINI K\n  \"k1a\", \"k1b\", \"k2a\", \"k2b\", \"k3a\", \"k3b\", \"k4a\", \"k4b\", \"k5a\", \"k5b\", \"k6a\", \"k6a1\", \"k6b\", \"k6b1\", \"k7a\", \"k7b\", \"k8a\", \"k8b\", \"k9a\", \"k9b\", \"k10a\", \"k10b\", \"k11a\", \"k11b\", \"sympt_psy_multi_act\", \n  \n  # MINI N\n  \"n1a\", \"n1b\", \"n1c\", \"n2\", \"n3a\", \"n3b\", \"n3c\", \"n3d\", \"n3e\", \"n3f\", \"n4\", \n  \n  # MINI P\n  \"p1a\", \"p1b\", \"p1c\", \"p1d\", \"p1e\", \"p1f\", \"p2a\", \"p2b\", \"p2c\", \"p2d\", \"p2e\", \"p2f\", \"p2g\", \n  \n  # Cloture\n  \"m0_real\", \"danger_immed\", \"exclus_enq\",\n  \"m3_real\", \"m3_danger_immed\", \"m3_exclus_enq\"\n\n  \n  \n  )",
    "crumbs": [
      "Intégration données d'enquête",
      "Nomenclatures",
      "epsylon_dictionnaries"
    ]
  },
  {
    "objectID": "QMD/epsylon_labels.html#categorical-variables",
    "href": "QMD/epsylon_labels.html#categorical-variables",
    "title": "epsylon_dictionnaries",
    "section": "2 Categorical variables",
    "text": "2 Categorical variables\nCountries\n\ncountries &lt;- c(\"FR\"=\"FRANCE\",\n\"AF\"=\"AFGHANISTAN\",\n\"ZA\"=\"AFRIQUE DU SUD\",\n\"AX\"=\"ÅLAND, ÎLES\",\n\"AL\"=\"ALBANIE\",\n\"DZ\"=\"ALGÉRIE\",\n\"DE\"=\"ALLEMAGNE\",\n\"AD\"=\"ANDORRE\",\n\"AO\"=\"ANGOLA\",\n\"AI\"=\"ANGUILLA\",\n\"AQ\"=\"ANTARCTIQUE\",\n\"AG\"=\"ANTIGUA-ET-BARBUDA\",\n\"AN\"=\"ANTILLES NÉERLANDAISES\",\n\"SA\"=\"ARABIE SAOUDITE\",\n\"AR\"=\"ARGENTINE\",\n\"AM\"=\"ARMÉNIE\",\n\"AW\"=\"ARUBA\",\n\"AU\"=\"AUSTRALIE\",\n\"AT\"=\"AUTRICHE\",\n\"AZ\"=\"AZERBAÏDJAN\",\n\"BS\"=\"BAHAMAS\",\n\"BH\"=\"BAHREÏN\",\n\"BD\"=\"BANGLADESH\",\n\"BB\"=\"BARBADE\",\n\"BY\"=\"BÉLARUS\",\n\"BE\"=\"BELGIQUE\",\n\"BZ\"=\"BELIZE\",\n\"BJ\"=\"BÉNIN\",\n\"BM\"=\"BERMUDES\",\n\"BT\"=\"BHOUTAN\",\n\"BO\"=\"BOLIVIE\",\n\"BA\"=\"BOSNIE-HERZÉGOVINE\",\n\"BW\"=\"BOTSWANA\",\n\"BV\"=\"BOUVET, ÎLE\",\n\"BR\"=\"BRÉSIL\",\n\"BN\"=\"BRUNÉI DARUSSALAM\",\n\"BG\"=\"BULGARIE\",\n\"BF\"=\"BURKINA FASO\",\n\"BI\"=\"BURUNDI\",\n\"KY\"=\"CAÏMANS, ÎLES\",\n\"KH\"=\"CAMBODGE\",\n\"CM\"=\"CAMEROUN\",\n\"CA\"=\"CANADA\",\n\"CV\"=\"CAP-VERT\",\n\"CF\"=\"CENTRAFRICAINE, RÉPUBLIQUE\",\n\"CL\"=\"CHILI\",\n\"CN\"=\"CHINE\",\n\"CX\"=\"CHRISTMAS, ÎLE\",\n\"CY\"=\"CHYPRE\",\n\"CC\"=\"COCOS (KEELING), ÎLES\",\n\"CO\"=\"COLOMBIE\",\n\"KM\"=\"COMORES\",\n\"CG\"=\"CONGO\",\n\"CD\"=\"CONGO, LA RÉPUBLIQUE DÉMOCRATIQUE DU\",\n\"CK\"=\"COOK, ÎLES\",\n\"KR\"=\"CORÉE, RÉPUBLIQUE DE\",\n\"KP\"=\"CORÉE, RÉPUBLIQUE POPULAIRE DÉMOCRATIQUE DE\",\n\"CR\"=\"COSTA RICA\",\n\"CI\"=\"CÔTE D'IVOIRE\",\n\"HR\"=\"CROATIE\",\n\"CU\"=\"CUBA\",\n\"DK\"=\"DANEMARK\",\n\"DJ\"=\"DJIBOUTI\",\n\"DO\"=\"DOMINICAINE, RÉPUBLIQUE\",\n\"DM\"=\"DOMINIQUE\",\n\"EG\"=\"ÉGYPTE\",\n\"SV\"=\"EL SALVADOR\",\n\"AE\"=\"ÉMIRATS ARABES UNIS\",\n\"EC\"=\"ÉQUATEUR\",\n\"ER\"=\"ÉRYTHRÉE\",\n\"ES\"=\"ESPAGNE\",\n\"EE\"=\"ESTONIE\",\n\"US\"=\"ÉTATS-UNIS\",\n\"ET\"=\"ÉTHIOPIE\",\n\"FK\"=\"FALKLAND, ÎLES (MALVINAS)\",\n\"FO\"=\"FÉROÉ, ÎLES\",\n\"FJ\"=\"FIDJI\",\n\"FI\"=\"FINLANDE\",\n\"GA\"=\"GABON\",\n\"GM\"=\"GAMBIE\",\n\"GE\"=\"GÉORGIE\",\n\"GS\"=\"GÉORGIE DU SUD ET LES ÎLES SANDWICH DU SUD\",\n\"GH\"=\"GHANA\",\n\"GI\"=\"GIBRALTAR\",\n\"GR\"=\"GRÈCE\",\n\"GD\"=\"GRENADE\",\n\"GL\"=\"GROENLAND\",\n\"GP\"=\"GUADELOUPE\",\n\"GU\"=\"GUAM\",\n\"GT\"=\"GUATEMALA\",\n\"GG\"=\"GUERNESEY\",\n\"GN\"=\"GUINÉE\",\n\"GW\"=\"GUINÉE-BISSAU\",\n\"GQ\"=\"GUINÉE ÉQUATORIALE\",\n\"GY\"=\"GUYANA\",\n\"GF\"=\"GUYANE FRANÇAISE\",\n\"HT\"=\"HAÏTI\",\n\"HM\"=\"HEARD, ÎLE ET MCDONALD, ÎLES\",\n\"HN\"=\"HONDURAS\",\n\"HK\"=\"HONG-KONG\",\n\"HU\"=\"HONGRIE\",\n\"IM\"=\"ÎLE DE MAN\",\n\"UM\"=\"ÎLES MINEURES ÉLOIGNÉES DES ÉTATS-UNIS\",\n\"VG\"=\"ÎLES VIERGES BRITANNIQUES\",\n\"VI\"=\"ÎLES VIERGES DES ÉTATS-UNIS\",\n\"IN\"=\"INDE\",\n\"ID\"=\"INDONÉSIE\",\n\"IR\"=\"IRAN, RÉPUBLIQUE ISLAMIQUE D'\",\n\"IQ\"=\"IRAQ\",\n\"IE\"=\"IRLANDE\",\n\"IS\"=\"ISLANDE\",\n\"IL\"=\"ISRAËL\",\n\"IT\"=\"ITALIE\",\n\"JM\"=\"JAMAÏQUE\",\n\"JP\"=\"JAPON\",\n\"JE\"=\"JERSEY\",\n\"JO\"=\"JORDANIE\",\n\"KZ\"=\"KAZAKHSTAN\",\n\"KE\"=\"KENYA\",\n\"KG\"=\"KIRGHIZISTAN\",\n\"KI\"=\"KIRIBATI\",\n\"KW\"=\"KOWEÏT\",\n\"LA\"=\"LAO, RÉPUBLIQUE DÉMOCRATIQUE POPULAIRE\",\n\"LS\"=\"LESOTHO\",\n\"LV\"=\"LETTONIE\",\n\"LB\"=\"LIBAN\",\n\"LR\"=\"LIBÉRIA\",\n\"LY\"=\"LIBYENNE, JAMAHIRIYA ARABE\",\n\"LI\"=\"LIECHTENSTEIN\",\n\"LT\"=\"LITUANIE\",\n\"LU\"=\"LUXEMBOURG\",\n\"MO\"=\"MACAO\",\n\"MK\"=\"MACÉDOINE, L'EX-RÉPUBLIQUE YOUGOSLAVE DE\",\n\"MG\"=\"MADAGASCAR\",\n\"MY\"=\"MALAISIE\",\n\"MW\"=\"MALAWI\",\n\"MV\"=\"MALDIVES\",\n\"ML\"=\"MALI\",\n\"MT\"=\"MALTE\",\n\"MP\"=\"MARIANNES DU NORD, ÎLES\",\n\"MA\"=\"MAROC\",\n\"MH\"=\"MARSHALL, ÎLES\",\n\"MQ\"=\"MARTINIQUE\",\n\"MU\"=\"MAURICE\",\n\"MR\"=\"MAURITANIE\",\n\"YT\"=\"MAYOTTE\",\n\"MX\"=\"MEXIQUE\",\n\"FM\"=\"MICRONÉSIE, ÉTATS FÉDÉRÉS DE\",\n\"MD\"=\"MOLDOVA, RÉPUBLIQUE DE\",\n\"MC\"=\"MONACO\",\n\"MN\"=\"MONGOLIE\",\n\"ME\"=\"MONTÉNÉGRO\",\n\"MS\"=\"MONTSERRAT\",\n\"MZ\"=\"MOZAMBIQUE\",\n\"MM\"=\"MYANMAR\",\n\"NA\"=\"NAMIBIE\",\n\"NR\"=\"NAURU\",\n\"NP\"=\"NÉPAL\",\n\"NI\"=\"NICARAGUA\",\n\"NE\"=\"NIGER\",\n\"NG\"=\"NIGÉRIA\",\n\"NU\"=\"NIUE\",\n\"NF\"=\"NORFOLK, ÎLE\",\n\"NO\"=\"NORVÈGE\",\n\"NC\"=\"NOUVELLE-CALÉDONIE\",\n\"NZ\"=\"NOUVELLE-ZÉLANDE\",\n\"IO\"=\"OCÉAN INDIEN, TERRITOIRE BRITANNIQUE DE L'\",\n\"OM\"=\"OMAN\",\n\"UG\"=\"OUGANDA\",\n\"UZ\"=\"OUZBÉKISTAN\",\n\"PK\"=\"PAKISTAN\",\n\"PW\"=\"PALAOS\",\n\"PS\"=\"PALESTINIEN OCCUPÉ, TERRITOIRE\",\n\"PA\"=\"PANAMA\",\n\"PG\"=\"PAPOUASIE-NOUVELLE-GUINÉE\",\n\"PY\"=\"PARAGUAY\",\n\"NL\"=\"PAYS-BAS\",\n\"PE\"=\"PÉROU\",\n\"PH\"=\"PHILIPPINES\",\n\"PN\"=\"PITCAIRN\",\n\"PL\"=\"POLOGNE\",\n\"PF\"=\"POLYNÉSIE FRANÇAISE\",\n\"PR\"=\"PORTO RICO\",\n\"PT\"=\"PORTUGAL\",\n\"QA\"=\"QATAR\",\n\"RE\"=\"RÉUNION\",\n\"RO\"=\"ROUMANIE\",\n\"GB\"=\"ROYAUME-UNI\",\n\"RU\"=\"RUSSIE, FÉDÉRATION DE\",\n\"RW\"=\"RWANDA\",\n\"EH\"=\"SAHARA OCCIDENTAL\",\n\"BL\"=\"SAINT-BARTHÉLEMY\",\n\"SH\"=\"SAINTE-HÉLÈNE\",\n\"LC\"=\"SAINTE-LUCIE\",\n\"KN\"=\"SAINT-KITTS-ET-NEVIS\",\n\"SM\"=\"SAINT-MARIN\",\n\"MF\"=\"SAINT-MARTIN\",\n\"PM\"=\"SAINT-PIERRE-ET-MIQUELON\",\n\"VA\"=\"SAINT-SIÈGE (ÉTAT DE LA CITÉ DU VATICAN)\",\n\"VC\"=\"SAINT-VINCENT-ET-LES GRENADINES\",\n\"SB\"=\"SALOMON, ÎLES\",\n\"WS\"=\"SAMOA\",\n\"AS\"=\"SAMOA AMÉRICAINES\",\n\"ST\"=\"SAO TOMÉ-ET-PRINCIPE\",\n\"SN\"=\"SÉNÉGAL\",\n\"RS\"=\"SERBIE\",\n\"SC\"=\"SEYCHELLES\",\n\"SL\"=\"SIERRA LEONE\",\n\"SG\"=\"SINGAPOUR\",\n\"SK\"=\"SLOVAQUIE\",\n\"SI\"=\"SLOVÉNIE\",\n\"SO\"=\"SOMALIE\",\n\"SD\"=\"SOUDAN\",\n\"LK\"=\"SRI LANKA\",\n\"SE\"=\"SUÈDE\",\n\"CH\"=\"SUISSE\",\n\"SR\"=\"SURINAME\",\n\"SJ\"=\"SVALBARD ET ÎLE JAN MAYEN\",\n\"SZ\"=\"SWAZILAND\",\n\"SY\"=\"SYRIENNE, RÉPUBLIQUE ARABE\",\n\"TJ\"=\"TADJIKISTAN\",\n\"TW\"=\"TAÏWAN, PROVINCE DE CHINE\",\n\"TZ\"=\"TANZANIE, RÉPUBLIQUE-UNIE DE\",\n\"TD\"=\"TCHAD\",\n\"CZ\"=\"TCHÈQUE, RÉPUBLIQUE\",\n\"TF\"=\"TERRES AUSTRALES FRANÇAISES\",\n\"TH\"=\"THAÏLANDE\",\n\"TL\"=\"TIMOR-LESTE\",\n\"TG\"=\"TOGO\",\n\"TK\"=\"TOKELAU\",\n\"TO\"=\"TONGA\",\n\"TT\"=\"TRINITÉ-ET-TOBAGO\",\n\"TN\"=\"TUNISIE\",\n\"TM\"=\"TURKMÉNISTAN\",\n\"TC\"=\"TURKS ET CAÏQUES, ÎLES\",\n\"TR\"=\"TURQUIE\",\n\"TV\"=\"TUVALU\",\n\"UA\"=\"UKRAINE\",\n\"UY\"=\"URUGUAY\",\n\"VU\"=\"VANUATU\",\n\"VE\"=\"VENEZUELA\",\n\"VN\"=\"VIET NAM\",\n\"WF\"=\"WALLIS ET FUTUNA\",\n\"YE\"=\"YÉMEN\",\n\"ZM\"=\"ZAMBIE\",\n\"ZW\"=\"ZIMBABWE\")\n\n\n2.1 Consentement\n\n# Formulaire de consentement\nconsent &lt;- c(\"1\" = \"Accord\", \"0\" =\"Refus\", \"99\" =\"Impossibilité\",\"97\" = \"Hors délai\")\n\nconsent_impossible &lt;- c(\"1\" = \"Transfert\", \"2\" = \"Libération anticipée\", \"3\" = \"Non maitrise de la langue\", \"4\" = \"Trouble cognitif\", \"5\" = \"Trouble psychiatrique\", \"6\" = \"Hors périmètre\", \"7\" = \"Hospitalisation\", \"8\" = \"Inclusion sur entrée précédente\", \"99\" = \"Autre\")\n\netab &lt;- c(\"1\" =\"CP LILLE ANNOEULLIN\", \"2\" =\"CP LILLE LOOS SEQUEDIN\", \"3\" =\"CP TOULOUSE SEYSSES\", \"4\" =\"MA MONTAUBAN\", \"5\" =\"MA FLEURY MEROGIS\", \"6\" =\"MA VERSAILLES\", \"7\" =\"MA STRASBOURG\")\n\nconsent_m9 = consent\nconsent_impossible_m9 = consent_impossible\netab_m9 = etab\n\n\n\n2.2 SD\n\n#SD\nsd_102 &lt;- countries\nsd_103 &lt;- c(\"1\"=\"Marié(e)\",\"2\"=\"Pacsé(e)\",\"3\"=\"En concubinage ou union libre\",\"4\"=\"Veuf, veuve\",\"5\"=\"Divorcé(e) ou en instance de divorce\",\"6\"=\"Célibataire\")\nsd_206 &lt;- countries\nsd_208 &lt;- c(\"1\"=\"Seul(e)\",\"2\"=\"Avec votre conjoint(e) uniquement\",\"3\"=\"Avec votre conjoint(e) et un ou plusieurs enfants\",\"4\"=\"Avec votre ou vos enfants uniquement\",\"5\"=\"Avec d'autres personnes (amis, famille élargie, etc.)\")\nsd_209 &lt;- c(\"1\"=\"Dans un logement personnel comme locataire\",\"2\"=\"Dans un logement personnel comme proprietaire\",\"3\"=\"En hébergement chez un tiers (famille, proches)\",\"4\"=\"En hébergement en institution\",\"5\"=\"Sans domicile fixe\")\nsd_300 &lt;- c(\"1\"= \"Vous n'êtes jamais allé(e) l'école ou vous l'avez quittée avant la fin du primaire\",\"2\"= \"Aucun diplôme et scolarité interrompue avant la fin du primaire ou avant la fin du collège\",\"3\"= \"Aucun diplôme et scolarité jusqu'à la fin du collège ou au-delà\",\"11\"= \"CEP (certificat d'études primaires)\",\"12\"= \"BEPC, brevet élémentaire, brevet des collèges, DNB\",\"13\"= \"CAP, BEP ou diplôme de niveau équivalent\",\"14\"= \"Baccalauréat général ou technologique, brevet supérieur, capacité en droit, DAEU, ESEU\",\"15\"= \"Baccalauréat professionnel, brevet professionnel, de technicien ou d'enseignement, diplôme équivalent\",\"16\"= \"BTS, DUT, Deug, Deust, diplôme de la santé ou du social de niveau bac+2, diplôme équivalent\",\"17\"= \"Licence, licence pro, maîtrise, diplôme équivalent de niveau bac+3 ou bac+4\",\"18\"= \"Master, DEA, DESS, diplôme grande école niveau bac+5, doctorat de santé\",\"19\"= \"Doctorat de recherche (hors santé)\")\nsd_301 &lt;- c(\"1\"= \"Emploi (salarié ou  votre compte, y compris aide d'une personne dans son travail)\",\"2\"= \"Apprentissage sous contrat ou stage rémunéré\",\"3\"= \"Etudes (élève, étudiant) ou stage non rémunéré\",\"4\"= \"Chômage (inscrit ou non au pôle emploi)\",\"5\"= \"Retraite ou préretraite (ancien salarié ou ancien indépendant)\",\"6\"= \"Femme ou homme au foyer\",\"7\"= \"Autre situation\")\nsd_302 &lt;- c(\"1\"= \"Agriculteurs exploitants / Agricultrices exploitantes\",\"2\"= \"Artisans / Artisanes, commerçants / commerçantes et chefs / cheffes d'entreprise\",\"3\"= \"Cadres et professions intellectuelles supérieures\",\"4\"= \"Professions intermédiaires\",\"5\"= \"Employés / Employées\",\"6\"= \"Ouvriers / Ouvrières\")\nsd_303 &lt;- c(\"1\"= \"Indépendant, employeur\",\"2\"= \"Intérimaire\",\"3\"= \"Aide familial\",\"4\"= \"Apprentis, stagiaire, contrat aidé\",\"5\"= \"Emploi à durée déterminée\",\"6\"= \"Emploi à durée indéterminée / titulaire de la fonction publique\")\nsd_402 &lt;- c(\"1\"= \"Non\",\"2\"= \"Oui, une sauvegarde de justice\",\"3\"= \"Oui, une tutelle\",\"4\"= \"Oui, une curatelle\",\"5\"= \"Oui, une curatelle renforcée\")\nsd_403 &lt;- c(\"1\"= \"RSA\",\"2\"= \"AAH\",\"3\"=\"Autre(s) aide(s) de la CAF ou du département\")\nsd_405 &lt;- c(\"1\"= \"Non\",\"2\"= \"Oui, en partie\",\"3\"=\"Oui, totalement\",\"99\"=\"Ne sait pas\")\nlieu_naiss &lt;- c(\"1\"= \"En France\",\"2\"=\"A l'étranger\",\"99\"=\"Ne sait pas\")\nsd_501 &lt;- lieu_naiss\nsd_502 &lt;- lieu_naiss\nsd_503 &lt;- lieu_naiss\nsd_504 &lt;- lieu_naiss\nsd_505 &lt;- lieu_naiss\nsd_506 &lt;- lieu_naiss\n\nlieu_naiss_fr &lt;- c(\"1\"= \"En France hexagonale\",\"2\"=\"En Outre-mer\")\nsd_501a &lt;- lieu_naiss_fr\nsd_502a &lt;- lieu_naiss_fr\nsd_503a &lt;- lieu_naiss_fr\nsd_504a &lt;- lieu_naiss_fr\nsd_505a &lt;- lieu_naiss_fr\nsd_506a &lt;- lieu_naiss_fr\n\nsd_501b &lt;- countries\nsd_502b &lt;- countries\nsd_503b &lt;- countries\nsd_504b &lt;- countries\nsd_505b &lt;- countries\nsd_506b &lt;- countries\nsd_600 &lt;- c(\"1\"= \"Non\",\"2\"= \"Oui, assistance éducative au domicile de votre famille\",\"3\"= \"Oui, placement chez un membre de votre famille\",\"4\"= \"Oui, placement en famille d’accueil\",\"5\"= \"Oui, placement en foyer\",\"6\"= \"Oui, placement en institut médico-éducatif (IME)\")\nsd_601 &lt;- c(\"1\"= \"Non\",\"2\"= \"Oui, mesure éducative\",\"3\"= \"Oui, sanction éducative\",\"4\"= \"Oui, placement en centre éducatif fermé / renforcé\",\"5\"= \"Oui, travail d’intérêt général\",\"6\"= \"Oui, incarcération (quartier mineur, établissement pour mineurs)\")\nsd_603a &lt;- c(\"1\"= \"Vol et recel\",\"2\"= \"Infractions à la législation sur les stupéfiants\",\"3\"= \"Violences volontaires (Hors violences conjugales)\",\"9\"= \"Violences conjugales\",\"4\"= \"Viols, agressions sexuelles, atteintes sexuelles\",\"5\"= \"Infractions routières (hors homicide et blessure involontaire)\",\"6\"= \"Homicide et atteinte volontaire ayant entraîné la mort\",\"7\"= \"Evasion, non respect des conditions d'une précédente condamnation, ou de conditions de libération/aménagement\",\"8\"= \"Détention, fabrication, ou vente de faux documents administratifs\",\"99\"= \"Ne sait pas\",\"98\"= \"Autre, précisez en toutes lettres :\")\nsd_604a &lt;- c(\"0\"= \"Non\",\"1\"= \"Oui, je dors sur un matelas\",\"2\"= \"Oui, un(e) de mes codétenu(e)s\")\nsd_606 &lt;- c(\"1\"= \"Non\",\"2\"= \"Oui, mon père\",\"3\"= \"Oui, ma mère\",\"4\"= \"Oui, un ou plusieurs de mes grands parents\",\"5\"= \"Oui, un de mes frères ou soeurs\",\"6\"= \"Oui, d'autres membre de ma famille\")\nsd_701a &lt;- c(\"1\"= \"N'a pas bougé\",\"2\"= \"S'est dégradé\",\"3\"= \"S'est amélioré\",\"4\"= \"Ne sait pas\")\nsd_702a &lt;- c(\"1\"= \"N'a pas bougé\",\"2\"= \"S'est dégradé\",\"3\"= \"S'est amélioré\",\"4\"= \"Ne sait pas\")\nsd_705 &lt;- c(\"1\"= \"Psychiatre\",\"2\"= \"Addictologue\",\"3\"= \"Psychologue\",\"0\"= \"Aucun suivi\",\"99\"= \"Ne sait pas\")\nsd_705c &lt;- c(\"1\"= \"Uniquement pendant une détention précédente\",\"2\"= \"Uniquement hors détention\",\"3\"= \"Les deux\",\"99\"= \"Ne sait plus\")\nsd_706 &lt;- c(\"1\"= \"Consultation libérale\",\"2\"= \"Consultation en centre médico-psychologique\",\"3\"= \"Consultation dans un centre de soins en addictologie\",\"4\"= \"Consultation en milieu carcéral lors d’une incarcération précédente\",\"5\"= \"Autre\")\nsd_710a &lt;- c(\"1\"= \"A ma demande (soin libre)\",\"2\"= \"Sans mon consentement (soins à la demande d'un tiers, soins en péril imminent, soins sur décision du représentant de l'Etat - Ancien HO)\",\"99\"= \"Ne sait plus\")\nsd_710a1 &lt;- c(\"1\"= \"Uniquement pendant une détention précédente\",\"2\"= \"Uniquement hors détention\",\"3\"= \"Les deux\",\"99\"= \"Ne sait plus\")\nsd_710a2 &lt;- c(\"1\"= \"Uniquement pendant une détention précédente\",\"2\"= \"Uniquement hors détention\",\"3\"= \"Les deux\",\"99\"= \"Ne sait plus\")\nsd_710a3 &lt;- c(\"1\"= \"Uniquement pendant une détention précédente\",\"2\"= \"Uniquement hors détention\",\"3\"= \"Les deux\",\"99\"= \"Ne sait plus\")\nsd_715 &lt;- c(\"1\"= \"Non\",\"2\"= \"Oui, un ou des codétenus\",\"3\"= \"Oui, des médecins ou personnels médicaux\",\"4\"= \"Oui, des personnels pénitentiaires\",\"5\"= \"Oui, autre\")\n\n\n\n2.3 PSS-10\n\npss_1 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\npss_2 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\npss_3 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\npss_4 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\npss_5 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\npss_6 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\npss_7 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\npss_8 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\npss_9 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\npss_10 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\npss_11 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\npss_12 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\npss_13 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\npss_14 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Presque jamais\" , \"2\" = \"Parfois\" , \"3\" = \"Assez souvent\" , \"4\" = \"Très souvent\")\n\npss_incarc_impact &lt;- c(\"1\" = \"Est responsable de leur apparition\" , \"2\" = \"Les a diminué\" , \"3\" = \"Les a aggravé\" , \"0\" = \"N'a rien changé aux symptomes\")\n\n\n\n2.4 ASRS\n\nasrs_1 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Rarement\" , \"2\" = \"Parfois\" , \"3\" = \"Souvent\" , \"4\" = \"Très souvent\")\nasrs_2 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Rarement\" , \"2\" = \"Parfois\" , \"3\" = \"Souvent\" , \"4\" = \"Très souvent\")\nasrs_3 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Rarement\" , \"2\" = \"Parfois\" , \"3\" = \"Souvent\" , \"4\" = \"Très souvent\")\nasrs_4 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Rarement\" , \"2\" = \"Parfois\" , \"3\" = \"Souvent\" , \"4\" = \"Très souvent\")\nasrs_5 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Rarement\" , \"2\" = \"Parfois\" , \"3\" = \"Souvent\" , \"4\" = \"Très souvent\")\nasrs_6 &lt;- c(\"0\" = \"Jamais\" , \"1\" = \"Rarement\" , \"2\" = \"Parfois\" , \"3\" = \"Souvent\" , \"4\" = \"Très souvent\")\nasrs_incarc_impact &lt;- c(\"1\" = \"Est responsable de leur apparition\" , \"2\" = \"Les a diminué\" , \"3\" = \"Les a aggravé\" , \"0\" = \"N'a rien changé aux symptomes\")\n\n\n\n2.5 MINI\n\n2.5.1 Module A\n\nmoda_incarc_impact &lt;- c(\"1\" = \"Est responsable de leur apparition\" , \"2\" = \"Les a diminué\" , \"3\" = \"Les a aggravé\" , \"0\" = \"N'a rien changé aux symptomes\")\n\n\n\n2.5.2 Module B\n\nb3a &lt;- c(\"1\" = \"Occasionnellement\" , \"2\" = \"Souvent\" , \"3\" = \"Très souvent\") \nb3b &lt;- c(\"1\" = \"Légère\" , \"2\" = \"Modérée\" , \"3\" = \"Sévère\") \nb18b &lt;- c(\"1\" = \"Actuel : au cours des 12 derniers mois\" , \"2\" = \"En rémission précoce : 12 à 24 mois auparavant\" , \"3\" = \"En rémission : &gt; 24 mois\") \nb16d &lt;- c(\"B16d1\" = \"Espériez-vous être secouru(e)/survivre ?\" , \"B16d2\" = \"Vous attendiez vous à mourir ou aviez-vous l’intention de mourir ?\")\n\n\n\n2.5.3 Module C\n\nc4_actual &lt;- c(\"C4a\" = \"3 jours ou moins\", \"C4b\" = \"4 jours ou plus\", \"C4c\" = \"7 jours ou plus\") \nc4_past &lt;- c(\"C4a\" = \"3 jours ou moins\", \"C4b\" = \"4 jours ou plus\", \"C4c\" = \"7 jours ou plus\") \nmodc_incarc_impact &lt;- c(\"1\" = \"Est responsable de leur apparition\", \"2\" = \"Les a diminué\", \"3\" = \"Les a aggravé\", \"0\" = \"N'a rien changé aux symptomes\")\n\n\n\n2.5.4 Module D\n\nmodd_incarc_impact &lt;- c(\"1\" = \"Est responsable de leur apparition\", \"2\" = \"Les a diminué\", \"3\" = \"Les a aggravé\", \"0\" = \"N'a rien changé aux symptomes\")\n\n\n\n2.5.5 Module F\n\nmodf_incarc_impact &lt;- c(\"1\" = \"Est responsable de leur apparition\", \"2\" = \"Les a diminué\", \"3\" = \"Les a aggravé\", \"0\" = \"N'a rien changé aux symptomes\")\n\n\n\n2.5.6 Module G\n\n#Module G \ninsight &lt;- c(\"1\" = \"Bon ou juste\", \"2\" = \"Médiocre\", \"3\" = \"Absent\", \"4\"=\"Trouble délirant\") \nmodg_incarc_impact &lt;- c(\"1\" = \"Est responsable de leur apparition\", \"2\" = \"Les a diminué\", \"3\" = \"Les a aggravé\", \"0\" = \"N'a rien changé aux symptomes\")\n\n\n\n2.5.7 Module Intro Alcool\n\naudit_1 &lt;- c(\"0\" = \"Jamais\",\"1\" = \"Une fois par mois ou moins\",\"2\" = \"2 à 4 fois par mois\",\"3\" = \"2 à 3 fois par semaine\",\"4\" = \"4 fois ou plus par semaine\")\naudit_2 &lt;- c(\"0\" = \"1 ou 2\", \"1\" = \"3 ou 4\", \"2\" = \"5 ou 6\", \"3\" = \"7, 8 ou 9\", \"4\" = \"10 ou plus\")\n\n\n\n\n2.6 Cloture\n\nlieu_enq &lt;- c(\"1\" = \"Quartier arrivant\" , \"2\" = \"Batiment\") \nm0_real_no &lt;- c(\"1\" = \"La personne a demandé à interrompre l'entretien\" , \"2\" = \"L'enqueteur/trice a demandé à interrompre l'entretien\" , \"99\" = \"Autre\")\nm3_real_no = m0_real_no\ncgi &lt;- c(\"1\" = \"1. Normal, pas du tout malade\" , \"2\" = \"2. A la limite\" , \"3\" = \"3. Légérement malade\" , \"4\" = \"4. Modérément malade\" , \"5\" = \"5. Manifestement malade\" , \"6\" = \"6. Gravement malade\" , \"7\" = \"7. Parmi les patients les plus malades\")\nm3_cgi = cgi\nm0_real_no_stopEnq &lt;- c(\"1\" = \"Caril ne comprend et ne parle pas suffisamment le français\" , \"2\" = \"Car il présente un trouble cognitif empêchant une bonne compréhension du questionnaire\" , \"3\" = \"Car il présente des troubles psychiatriques empêchant la passation du questionnaire (décompensation aiguë avec indication d’hospitalisation en urgence)\" , \"4\" = \"Il ne s'agit finalement pas d'une nouvelle entrée (hors périmètre)\" , \"99\" = \"Autre\") \ncoop &lt;- c(\"1\" =\"Bon ou très bon\" , \"2\" =\"Moyen\" , \"3\" =\"Mauvais ou très mauvais\") \nlang &lt;- c(\"1\" =\"Bonne ou très bonne\" , \"2\" =\"Moyenne\" , \"3\" =\"Mauvaise ou très mauvaise\")",
    "crumbs": [
      "Intégration données d'enquête",
      "Nomenclatures",
      "epsylon_dictionnaries"
    ]
  },
  {
    "objectID": "QMD/index.html",
    "href": "QMD/index.html",
    "title": "EPSYLON dataprocessing routines",
    "section": "",
    "text": "Description des différentes étapes necessaires au traitement des fichiers de donnés mis à disposition par EX3.\n\nReception des données\n\nLes données d’entrée sont receptionnées sur une base hebdomadaire\nLes données de nomenclature sont receptionnées ponctuellement en fonction des mises à jour récentes.\n\n\nLa reception est faite via un lien sécurisé ATLAS, transmis par EX3 au chargé de traitement EPSYLON. Les données sont datées et stockées dans le repertoire dédié.\n\nTraitement\n\n\nIdentification du dernier fichier disponible\nImport des données\nImport des données n-1\nRetrait des doublons et sorties précoces\nRetrait des personnes non enquêté sur la semaine considérée (lorsque Fleury ou Seysse)\nAjout des informations supplémentaires suivantes :\n\nDate de sortie prev\nStatut\nLocalisation UGC : traitement hierarchique spécifique de la table à prévoir\n\n\n\nExports\n\n\nMise en place des fichiers individuels etab à transmettre aux personnes référentes",
    "crumbs": [
      "Intégration données d'enquête",
      "EPSYLON dataprocessing routines"
    ]
  },
  {
    "objectID": "QMD/M3_to_M9_meeting_progress.html",
    "href": "QMD/M3_to_M9_meeting_progress.html",
    "title": "M0 to M9 meeting progress",
    "section": "",
    "text": "Creation de listes regroupant la totalité des personnes attendues comme devant être rencontrées, leur statut au jour du traitement, et certaines informations utiles supplémentaires.\nCe script s’appuie sur les résultats de :\n\nLa liste de l’ensemble des personnes extraites des fichiers entrées mis à disposition par la DAP depuis le début de l’étude\nLes résultats des saisies déjà réalisées par les enquêteurs/rices et telechargées depuis le site goupile",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "M0 to M9 meeting progress"
    ]
  },
  {
    "objectID": "QMD/M3_to_M9_meeting_progress.html#description",
    "href": "QMD/M3_to_M9_meeting_progress.html#description",
    "title": "M0 to M9 meeting progress",
    "section": "",
    "text": "Creation de listes regroupant la totalité des personnes attendues comme devant être rencontrées, leur statut au jour du traitement, et certaines informations utiles supplémentaires.\nCe script s’appuie sur les résultats de :\n\nLa liste de l’ensemble des personnes extraites des fichiers entrées mis à disposition par la DAP depuis le début de l’étude\nLes résultats des saisies déjà réalisées par les enquêteurs/rices et telechargées depuis le site goupile",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "M0 to M9 meeting progress"
    ]
  },
  {
    "objectID": "QMD/M3_to_M9_meeting_progress.html#fonctions",
    "href": "QMD/M3_to_M9_meeting_progress.html#fonctions",
    "title": "M0 to M9 meeting progress",
    "section": "2 Fonctions",
    "text": "2 Fonctions\n\n2.0.1 M0 list creation\nlabeled_m0\n\npeople_to_meet_m0 = function(all_to_meet_list, labeled_m0, sorties){\n\n    # Préparation fichiers initiaux\n  people_to_meet = all_to_meet_list %&gt;% unite(\"derniere_localisation\", cellule, starts_with(\"Zone_niveau_\"), sep = \" &gt; \", na.rm = TRUE, remove = TRUE)\n\n  people_met = labeled_m0 %&gt;% select(etab, ecrou_init,consent, consent_impossible, consent_X__CTIME, exclus_enq,sd_603, comment) %&gt;% mutate(consent_X__CTIME = substr(consent_X__CTIME,1,10))\n  \n  people_gone = sorties %&gt;% select(ecrou_init, libelle_court_etablissement_mouvement,type_mouvement, date_et_heure_du_mouvement) %&gt;% \n    mutate(ecrou_init = as.character(ecrou_init))\n  \n  #Aggregation des informations\n  temp_to_meet = people_to_meet %&gt;% \n    left_join(people_met,by = c(\"n_ecrou_initial\" = \"ecrou_init\", \"etablissement\" = \"etab\")) %&gt;% \n    left_join(people_gone, c(\"n_ecrou_initial\" = \"ecrou_init\",\"etablissement\" = \"libelle_court_etablissement_mouvement\"))\n  \n  # Ajout des labels et tris pour faciliter la lecutre\n  people_to_meet_m0 = temp_to_meet %&gt;% mutate(\n    date_verif = Sys.Date(),\n    jour_restant = ifelse(is.na(consent),as.Date(planifier_avant_le) - date_verif,NA),\n    derniere_localisation = ifelse(is.na(consent),derniere_localisation,NA),\n    Statut_M0 = case_when(\n      !is.na(consent) ~ \"OK\",\n      !is.na(date_et_heure_du_mouvement) ~ \"A quitté l'étab\",\n      as.Date(planifier_avant_le) &lt; date_verif ~ \"Hors délais\",\n      as.Date(planifier_avant_le) == date_verif ~ \"Dernier jour\",\n      (as.Date(planifier_avant_le) - date_verif) &lt; 7  ~ \"Derniere semaine\",\n      as.Date(planifier_a_partir_du) &gt; date_verif ~ \"Trop tôt\",\n      TRUE ~ NA\n    )\n  ) %&gt;% select(etablissement, Statut_M0, jour_restant, everything(),-derniere_localisation, -exclus_enq, derniere_localisation, exclus_enq) %&gt;% arrange(etablissement,jour_restant) %&gt;% mutate(across(everything(), as.character)) %&gt;% rename(\"Condamné\" = \"sd_603\")\n  \n  return(people_to_meet_m0)\n}\n\n\n\n2.0.2 M3 list creation\n\npeople_to_meet_m3 = function(m0_progress, labeled_m3){\n\n    people_met_m3 = labeled_m3 %&gt;% select(etab, ecrou_init,consent,consent_impossible ,consent_X__CTIME, m3_exclus_enq, comment) %&gt;% mutate(consent_X__CTIME = substr(consent_X__CTIME,1,10)) %&gt;% \n      rename(\"date_consent_m3\" = \"consent_X__CTIME\",\n             \"consent_m3\" = \"consent\",\n             \"consent_imposs M3\" = \"consent_impossible\",\n             \"exclusion_du_M9\" = \"m3_exclus_enq\",\n             \"comment_m3\" = \"comment\")\n    \n  people_to_meet_m3 = m0_progress %&gt;% \n    filter(consent ==\"Accord\" & \n             !(exclus_enq %in% c(1,\"Oui\",\"1\")))\n  \n    #Aggregation des informations\n  temp_to_meet = people_to_meet_m3 %&gt;% \n    left_join(people_met_m3,by = c(\"n_ecrou_initial\" = \"ecrou_init\", \"etablissement\" = \"etab\"))\n  \n  \n  temp_to_meet = temp_to_meet %&gt;% \n  mutate(\n    date_rencontre_m0 = consent_X__CTIME,\n    planifier_a_partir_du = as.Date(date_entree) + 61,\n    planifier_avant_le= as.Date(date_entree) + 122,\n    Statut_M3 = case_when(\n      !is.na(consent_m3) ~ \"OK\",\n      !is.na(type_mouvement) ~ \"Sortie/transferé\",\n      as.Date(planifier_avant_le) &lt; as.Date(date_verif) ~ \"Hors délais\",\n      as.Date(planifier_a_partir_du) &gt; as.Date(date_verif) ~ \"Trop tôt\",\n      as.Date(date_verif) &gt;= as.Date(date_entree) + 76 &  as.Date(date_verif) &lt;= as.Date(date_entree) + 114~ \"Planification cible idéale\",\n      as.Date(planifier_avant_le) == as.Date(date_verif) ~ \"Dernier jour\",\n      (as.Date(planifier_avant_le) - as.Date(date_verif)) &lt; 15  ~ \"Derniere quinzaine\",\n      as.Date(date_verif) &lt; as.Date(date_entree) + 76  ~ \"Planifiable (avance)\",\n      as.Date(date_verif) &lt; as.Date(date_entree) + 114  ~ \"Planifiable (retard)\",\n      TRUE ~ \"Planifiable\"\n  ),\n      jour_restant = ifelse(Statut_M3 == \"OK\",NA,as.Date(planifier_avant_le) - as.Date(date_verif))\n  ) %&gt;% \n    select(-Statut_M0,-exclus_enq,-date_liberation_previsionnelle,-consent,-consent_impossible, -consent_X__CTIME, -derniere_localisation) %&gt;% \n    select(etablissement, Statut_M3,jour_restant, n_ecrou_initial, sexe, date_entree, date_rencontre_m0, date_verif, everything()) %&gt;% mutate(across(everything(), as.character)) %&gt;% \n    arrange(etablissement,as.numeric(jour_restant))\n\n  \n  return(temp_to_meet)\n}\n\n\n\n2.0.3 M9 list creation\n\npeople_to_meet_m9 = function(m3_progress,labeled_m9){\n    \n  people_met_m9 = labeled_m9 %&gt;% select(etab_m9, ecrou_init,consent_m9,consent_impossible_m9 ,consent_m9_X__CTIME) %&gt;% mutate(consent_m9_X__CTIME = substr(consent_m9_X__CTIME,1,10)) %&gt;% \n      rename(\"date_consent_m9\" = \"consent_m9_X__CTIME\")\n  \n  people_to_meet_m9 = m3_progress %&gt;% \n    filter(consent_m3 ==\"Accord\" & \n             !(exclusion_du_M9 %in% c(1,\"Oui\",\"1\")))\n  \n#Aggregation des informations\ntemp_to_meet = people_to_meet_m9 %&gt;% \n  left_join(people_met_m9,by = c(\"n_ecrou_initial\" = \"ecrou_init\", \"etablissement\" = \"etab_m9\"))\n\ntemp_to_meet_m9 = temp_to_meet %&gt;% \n  filter(consent_m3 == \"Accord\" & exclusion_du_M9 == \"Non\") %&gt;% \n  mutate(date_verif = Sys.Date()\n         ,date_mouvement = substr(date_et_heure_du_mouvement,1,10)\n         ,planifier_a_partir_du = as.Date(date_entree) + 214\n         ,planifier_avant_le= as.Date(date_entree) + 275\n         ,jour_restant = as.Date(planifier_avant_le) - as.Date(date_verif)\n         ,Statut_M9 = case_when(\n           !is.na(consent_m9) ~ \"OK\",\n           !is.na(type_mouvement) ~ \"Sortie/transferé\",\n           as.Date(planifier_avant_le) &lt; as.Date(date_verif) ~ \"Hors délais\",\n           as.Date(planifier_a_partir_du) &gt; as.Date(date_verif) ~ \"Trop tôt\",\n           as.Date(planifier_avant_le) == as.Date(date_verif) ~ \"Dernier jour\",\n           (as.Date(planifier_avant_le) - as.Date(date_verif)) &lt; 15  ~ \"Derniere quinzaine\",\n           TRUE ~ \"Planifiable\"\n         )\n  ) %&gt;% \n  select(etablissement\n         ,Statut_M9\n         ,jour_restant\n         ,n_ecrou_initial\n         ,sexe\n         ,date_entree\n         ,date_consent_m3\n         ,planifier_a_partir_du\n         ,planifier_avant_le\n         ,comment_m3\n         ,type_mouvement\n         ,date_mouvement\n         ,consent_m9\n         ,consent_impossible_m9\n         ,date_consent_m9\n         ,date_verif\n  ) %&gt;% mutate(across(everything(), as.character)) %&gt;% \n  arrange(etablissement,as.numeric(jour_restant))\n  \n  return(temp_to_meet_m9)\n}\n\n\n\n2.0.4 \n\n\n2.1 Progress M0 to M9 export\n\nexport_progress_list = function(m0_progress,m3_progress,m9_progress){\n\n  investig_path = \"Ressources enquête/Listes hebdomadaires entretiens/Suivi_global/\"\n  coordination_path = \"data/output/coordination_tools/\"\n\n  \n  liste_coord &lt;- list(\"M0\" = m0_progress,\n                      \"M3\" = m3_progress,\n                      \"M9\" = m9_progress\n                      )\n    write.xlsx(liste_coord,paste0(coordination_path,Sys.Date(),\"_m0_to_m9_progress.xlsx\"),colNames = TRUE, firstRow =TRUE,borders = \"rows\",bandedRows=TRUE,asTable = TRUE)\n  \n  \n  etab_list = unique(m0_progress$etablissement)\n  for (etab in etab_list){\n    temp_m0 = m0_progress %&gt;% filter(etablissement == etab)\n    temp_m3 = m3_progress %&gt;% filter(etablissement == etab)\n    temp_m9 = m9_progress %&gt;% filter(etablissement == etab)\n\n    period = c(\"m0\",\"m3\",\"m9\")\n\n    for (wave in period){\n      subfolder_path = paste0(investig_path, wave, \"/\")\n      file_temp = get(paste0(\"temp_\", wave))\n      write.xlsx(file_temp,paste0(subfolder_path, wave, \"_\",etab,\"_liste_suivi.xlsx\"),colNames = TRUE, firstRow =TRUE,borders = \"rows\",bandedRows=TRUE,asTable = TRUE)\n    }\n  }\n}",
    "crumbs": [
      "Intégration données d'enquête",
      "Functions",
      "M0 to M9 meeting progress"
    ]
  }
]